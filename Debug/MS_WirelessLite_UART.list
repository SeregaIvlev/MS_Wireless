
MS_WirelessLite_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002734  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080027f4  080027f4  000127f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002840  08002840  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002840  08002840  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002840  08002840  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000014  0800285c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0800285c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133a2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257a  00000000  00000000  000333de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c6b3  00000000  00000000  00035958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  00042010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b0  00000000  00000000  00042ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe8d  00000000  00000000  00043e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013647  00000000  00000000  00053cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006220f  00000000  00000000  0006733c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c954b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000221c  00000000  00000000  000c95a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027dc 	.word	0x080027dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080027dc 	.word	0x080027dc

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <NRF24_USER_DelayMicroSec>:
extern TIM_HandleTypeDef htim17;



void NRF24_USER_DelayMicroSec(uint32_t micros) {
	__HAL_TIM_SET_COUNTER(&htim17, 0);
 8000248:	2200      	movs	r2, #0
 800024a:	4b03      	ldr	r3, [pc, #12]	; (8000258 <NRF24_USER_DelayMicroSec+0x10>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim17) < micros);
 8000250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000252:	4282      	cmp	r2, r0
 8000254:	d3fc      	bcc.n	8000250 <NRF24_USER_DelayMicroSec+0x8>
}
 8000256:	4770      	bx	lr
 8000258:	20000034 	.word	0x20000034

0800025c <SPI_TxRx>:
 *   - output data is propagated on falling edge of SCLK.
 *
 * Returns the received byte.
 */
uint8_t SPI_TxRx(uint8_t data_tx)
{
 800025c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t byte_rx = 0;
    uint8_t bit;

    for (bit = 0x80; bit; bit >>= 1) {
        /* Shift-out a bit to the MOSI line */
        HAL_GPIO_WritePin(NRF_MOSI_GPIO_Port, NRF_MOSI_Pin, (data_tx & bit) ? SET : RESET);
 800025e:	2790      	movs	r7, #144	; 0x90
{
 8000260:	2608      	movs	r6, #8
    for (bit = 0x80; bit; bit >>= 1) {
 8000262:	2480      	movs	r4, #128	; 0x80
    uint8_t byte_rx = 0;
 8000264:	2500      	movs	r5, #0
{
 8000266:	9001      	str	r0, [sp, #4]
        HAL_GPIO_WritePin(NRF_MOSI_GPIO_Port, NRF_MOSI_Pin, (data_tx & bit) ? SET : RESET);
 8000268:	05ff      	lsls	r7, r7, #23
 800026a:	9a01      	ldr	r2, [sp, #4]
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	4022      	ands	r2, r4
 8000270:	1e53      	subs	r3, r2, #1
 8000272:	419a      	sbcs	r2, r3
 8000274:	0189      	lsls	r1, r1, #6
 8000276:	b2d2      	uxtb	r2, r2
 8000278:	0038      	movs	r0, r7
 800027a:	f000 fd81 	bl	8000d80 <HAL_GPIO_WritePin>

        /* Delay for at least the peer's setup time */
        NRF24_USER_DelayMicroSec(1);
 800027e:	2001      	movs	r0, #1
 8000280:	f7ff ffe2 	bl	8000248 <NRF24_USER_DelayMicroSec>

        /* Pull the clock line high */
        HAL_GPIO_WritePin(NRF_SCK_GPIO_Port, NRF_SCK_Pin, SET);
 8000284:	2102      	movs	r1, #2
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <SPI_TxRx+0x60>)
 8000288:	2201      	movs	r2, #1
 800028a:	f000 fd79 	bl	8000d80 <HAL_GPIO_WritePin>

        /* Shift-in a bit from the MISO line */
        if(HAL_GPIO_ReadPin(NRF_MISO_GPIO_Port, NRF_MISO_Pin) == GPIO_PIN_SET)
 800028e:	2180      	movs	r1, #128	; 0x80
 8000290:	0038      	movs	r0, r7
 8000292:	01c9      	lsls	r1, r1, #7
 8000294:	f000 fd6e 	bl	8000d74 <HAL_GPIO_ReadPin>
 8000298:	2801      	cmp	r0, #1
 800029a:	d100      	bne.n	800029e <SPI_TxRx+0x42>
            byte_rx |= bit;
 800029c:	4325      	orrs	r5, r4

        /* Delay for at least the peer's hold time */
        NRF24_USER_DelayMicroSec(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f7ff ffd2 	bl	8000248 <NRF24_USER_DelayMicroSec>

        /* Pull the clock line low */
        HAL_GPIO_WritePin(NRF_SCK_GPIO_Port, NRF_SCK_Pin, RESET);
 80002a4:	3e01      	subs	r6, #1
 80002a6:	2200      	movs	r2, #0
 80002a8:	2102      	movs	r1, #2
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <SPI_TxRx+0x60>)
 80002ac:	f000 fd68 	bl	8000d80 <HAL_GPIO_WritePin>
    for (bit = 0x80; bit; bit >>= 1) {
 80002b0:	0864      	lsrs	r4, r4, #1
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d1d9      	bne.n	800026a <SPI_TxRx+0xe>
    }

    return byte_rx;
}
 80002b6:	0028      	movs	r0, r5
 80002b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	48000400 	.word	0x48000400

080002c0 <SPI_Tx>:
void SPI_Tx(uint8_t* data_tx, uint8_t size)
{
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	0004      	movs	r4, r0
 80002c4:	1845      	adds	r5, r0, r1
	for(uint8_t cnt = 0; cnt < size; cnt++)
 80002c6:	42ac      	cmp	r4, r5
 80002c8:	d100      	bne.n	80002cc <SPI_Tx+0xc>
		SPI_TxRx(data_tx[cnt]);

}
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
		SPI_TxRx(data_tx[cnt]);
 80002cc:	7820      	ldrb	r0, [r4, #0]
 80002ce:	f7ff ffc5 	bl	800025c <SPI_TxRx>
	for(uint8_t cnt = 0; cnt < size; cnt++)
 80002d2:	3401      	adds	r4, #1
 80002d4:	e7f7      	b.n	80002c6 <SPI_Tx+0x6>

080002d6 <SPI_Rx>:
void SPI_Rx(uint8_t* data_tx, uint8_t size)
{
 80002d6:	b570      	push	{r4, r5, r6, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	1845      	adds	r5, r0, r1
	for(uint8_t cnt = 0; cnt < size; cnt++)
 80002dc:	42ac      	cmp	r4, r5
 80002de:	d100      	bne.n	80002e2 <SPI_Rx+0xc>
		data_tx[cnt] = SPI_TxRx(0xFF);
}
 80002e0:	bd70      	pop	{r4, r5, r6, pc}
		data_tx[cnt] = SPI_TxRx(0xFF);
 80002e2:	20ff      	movs	r0, #255	; 0xff
 80002e4:	f7ff ffba 	bl	800025c <SPI_TxRx>
 80002e8:	7020      	strb	r0, [r4, #0]
	for(uint8_t cnt = 0; cnt < size; cnt++)
 80002ea:	3401      	adds	r4, #1
 80002ec:	e7f6      	b.n	80002dc <SPI_Rx+0x6>
	...

080002f0 <CS_Select>:


void CS_Select (void)
{
 80002f0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2102      	movs	r1, #2
 80002f6:	4802      	ldr	r0, [pc, #8]	; (8000300 <CS_Select+0x10>)
 80002f8:	f000 fd42 	bl	8000d80 <HAL_GPIO_WritePin>
}
 80002fc:	bd10      	pop	{r4, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	48001400 	.word	0x48001400

08000304 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000304:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2102      	movs	r1, #2
 800030a:	4802      	ldr	r0, [pc, #8]	; (8000314 <CS_UnSelect+0x10>)
 800030c:	f000 fd38 	bl	8000d80 <HAL_GPIO_WritePin>
}
 8000310:	bd10      	pop	{r4, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	48001400 	.word	0x48001400

08000318 <CE_Enable>:

void CE_Enable (void)
{
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
{
 800031a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 800031c:	0011      	movs	r1, r2
 800031e:	4802      	ldr	r0, [pc, #8]	; (8000328 <CE_Enable+0x10>)
 8000320:	f000 fd2e 	bl	8000d80 <HAL_GPIO_WritePin>
}
 8000324:	bd10      	pop	{r4, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	48001400 	.word	0x48001400

0800032c <CE_Disable>:

void CE_Disable (void)
{
 800032c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2101      	movs	r1, #1
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <CE_Disable+0x10>)
 8000334:	f000 fd24 	bl	8000d80 <HAL_GPIO_WritePin>
}
 8000338:	bd10      	pop	{r4, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	48001400 	.word	0x48001400

08000340 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000340:	b507      	push	{r0, r1, r2, lr}
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000342:	2320      	movs	r3, #32
 8000344:	466a      	mov	r2, sp
 8000346:	4303      	orrs	r3, r0
	buf[1] = Data;
 8000348:	7151      	strb	r1, [r2, #5]
	buf[0] = Reg|1<<5;
 800034a:	7113      	strb	r3, [r2, #4]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800034c:	f7ff ffd0 	bl	80002f0 <CS_Select>

	SPI_Tx(buf, 2);
 8000350:	2102      	movs	r1, #2
 8000352:	a801      	add	r0, sp, #4
 8000354:	f7ff ffb4 	bl	80002c0 <SPI_Tx>
	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000358:	f7ff ffd4 	bl	8000304 <CS_UnSelect>
}
 800035c:	bd07      	pop	{r0, r1, r2, pc}

0800035e <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800035e:	2320      	movs	r3, #32
{
 8000360:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000362:	0014      	movs	r4, r2
 8000364:	000d      	movs	r5, r1
	buf[0] = Reg|1<<5;
 8000366:	4303      	orrs	r3, r0
 8000368:	ae01      	add	r6, sp, #4
 800036a:	7033      	strb	r3, [r6, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800036c:	f7ff ffc0 	bl	80002f0 <CS_Select>

	SPI_Tx(buf, 1);
 8000370:	0030      	movs	r0, r6
 8000372:	2101      	movs	r1, #1
 8000374:	f7ff ffa4 	bl	80002c0 <SPI_Tx>
	SPI_Tx(data, size);
 8000378:	0028      	movs	r0, r5
 800037a:	b2e1      	uxtb	r1, r4
 800037c:	f7ff ffa0 	bl	80002c0 <SPI_Tx>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000380:	f7ff ffc0 	bl	8000304 <CS_UnSelect>
}
 8000384:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

08000388 <nrf24_reset.part.0>:

	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
 8000388:	b530      	push	{r4, r5, lr}
	{
		nrf24_WriteReg(FIFO_STATUS, 0x11);
	}

	else {
	nrf24_WriteReg(CONFIG, 0x08);
 800038a:	2108      	movs	r1, #8
void nrf24_reset(uint8_t REG)
 800038c:	b087      	sub	sp, #28
	nrf24_WriteReg(CONFIG, 0x08);
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ffd6 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000394:	213f      	movs	r1, #63	; 0x3f
 8000396:	2001      	movs	r0, #1
 8000398:	f7ff ffd2 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800039c:	2103      	movs	r1, #3
 800039e:	2002      	movs	r0, #2
 80003a0:	f7ff ffce 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003a4:	2103      	movs	r1, #3
	nrf24_WriteReg(RF_CH, 0x02);
	nrf24_WriteReg(RF_SETUP, 0x0E);
	nrf24_WriteReg(STATUS, 0x00);
	nrf24_WriteReg(OBSERVE_TX, 0x00);
	nrf24_WriteReg(CD, 0x00);
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003a6:	2405      	movs	r4, #5
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003a8:	0008      	movs	r0, r1
 80003aa:	f7ff ffc9 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003ae:	2103      	movs	r1, #3
 80003b0:	2004      	movs	r0, #4
 80003b2:	f7ff ffc5 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003b6:	2102      	movs	r1, #2
 80003b8:	2005      	movs	r0, #5
 80003ba:	f7ff ffc1 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003be:	210e      	movs	r1, #14
 80003c0:	2006      	movs	r0, #6
 80003c2:	f7ff ffbd 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80003c6:	2100      	movs	r1, #0
 80003c8:	2007      	movs	r0, #7
 80003ca:	f7ff ffb9 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2008      	movs	r0, #8
 80003d2:	f7ff ffb5 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80003d6:	2100      	movs	r1, #0
 80003d8:	2009      	movs	r0, #9
 80003da:	f7ff ffb1 	bl	8000340 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003de:	4d2a      	ldr	r5, [pc, #168]	; (8000488 <nrf24_reset.part.0+0x100>)
 80003e0:	0022      	movs	r2, r4
 80003e2:	0029      	movs	r1, r5
 80003e4:	4668      	mov	r0, sp
 80003e6:	f002 f9e7 	bl	80027b8 <memcpy>
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80003ea:	0022      	movs	r2, r4
 80003ec:	4669      	mov	r1, sp
 80003ee:	200a      	movs	r0, #10
 80003f0:	f7ff ffb5 	bl	800035e <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80003f4:	0022      	movs	r2, r4
 80003f6:	4925      	ldr	r1, [pc, #148]	; (800048c <nrf24_reset.part.0+0x104>)
 80003f8:	a802      	add	r0, sp, #8
 80003fa:	f002 f9dd 	bl	80027b8 <memcpy>
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80003fe:	0022      	movs	r2, r4
 8000400:	a902      	add	r1, sp, #8
 8000402:	200b      	movs	r0, #11
 8000404:	f7ff ffab 	bl	800035e <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000408:	21c3      	movs	r1, #195	; 0xc3
 800040a:	200c      	movs	r0, #12
 800040c:	f7ff ff98 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000410:	21c4      	movs	r1, #196	; 0xc4
 8000412:	200d      	movs	r0, #13
 8000414:	f7ff ff94 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000418:	21c5      	movs	r1, #197	; 0xc5
 800041a:	200e      	movs	r0, #14
 800041c:	f7ff ff90 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000420:	21c6      	movs	r1, #198	; 0xc6
 8000422:	200f      	movs	r0, #15
 8000424:	f7ff ff8c 	bl	8000340 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000428:	0022      	movs	r2, r4
 800042a:	0029      	movs	r1, r5
 800042c:	a804      	add	r0, sp, #16
 800042e:	f002 f9c3 	bl	80027b8 <memcpy>
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000432:	0022      	movs	r2, r4
 8000434:	a904      	add	r1, sp, #16
 8000436:	2010      	movs	r0, #16
 8000438:	f7ff ff91 	bl	800035e <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800043c:	2100      	movs	r1, #0
 800043e:	2011      	movs	r0, #17
 8000440:	f7ff ff7e 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000444:	2100      	movs	r1, #0
 8000446:	2012      	movs	r0, #18
 8000448:	f7ff ff7a 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800044c:	2100      	movs	r1, #0
 800044e:	2013      	movs	r0, #19
 8000450:	f7ff ff76 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000454:	2100      	movs	r1, #0
 8000456:	2014      	movs	r0, #20
 8000458:	f7ff ff72 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800045c:	2100      	movs	r1, #0
 800045e:	2015      	movs	r0, #21
 8000460:	f7ff ff6e 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000464:	2100      	movs	r1, #0
 8000466:	2016      	movs	r0, #22
 8000468:	f7ff ff6a 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800046c:	2111      	movs	r1, #17
 800046e:	2017      	movs	r0, #23
 8000470:	f7ff ff66 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000474:	2100      	movs	r1, #0
 8000476:	201c      	movs	r0, #28
 8000478:	f7ff ff62 	bl	8000340 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	201d      	movs	r0, #29
 8000480:	f7ff ff5e 	bl	8000340 <nrf24_WriteReg>
	}
}
 8000484:	b007      	add	sp, #28
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	080027f4 	.word	0x080027f4
 800048c:	080027fa 	.word	0x080027fa

08000490 <nrf24_ReadReg>:
{
 8000490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000492:	466b      	mov	r3, sp
	uint8_t data=0;
 8000494:	466a      	mov	r2, sp
{
 8000496:	1ddc      	adds	r4, r3, #7
 8000498:	71d8      	strb	r0, [r3, #7]
	uint8_t data=0;
 800049a:	2300      	movs	r3, #0
 800049c:	73d3      	strb	r3, [r2, #15]
	CS_Select();
 800049e:	f7ff ff27 	bl	80002f0 <CS_Select>
	SPI_Tx(&Reg, 1);
 80004a2:	0020      	movs	r0, r4
 80004a4:	2101      	movs	r1, #1
 80004a6:	f7ff ff0b 	bl	80002c0 <SPI_Tx>
	SPI_Rx(&data, 1);
 80004aa:	230f      	movs	r3, #15
 80004ac:	446b      	add	r3, sp
 80004ae:	0018      	movs	r0, r3
 80004b0:	2101      	movs	r1, #1
 80004b2:	f7ff ff10 	bl	80002d6 <SPI_Rx>
	CS_UnSelect();
 80004b6:	f7ff ff25 	bl	8000304 <CS_UnSelect>
	return data;
 80004ba:	466b      	mov	r3, sp
 80004bc:	7bd8      	ldrb	r0, [r3, #15]
}
 80004be:	b004      	add	sp, #16
 80004c0:	bd10      	pop	{r4, pc}

080004c2 <nrfsendCmd>:
{
 80004c2:	b513      	push	{r0, r1, r4, lr}
 80004c4:	466b      	mov	r3, sp
 80004c6:	1ddc      	adds	r4, r3, #7
 80004c8:	71d8      	strb	r0, [r3, #7]
	CS_Select();
 80004ca:	f7ff ff11 	bl	80002f0 <CS_Select>
	SPI_Tx(&cmd, 1);
 80004ce:	2101      	movs	r1, #1
 80004d0:	0020      	movs	r0, r4
 80004d2:	f7ff fef5 	bl	80002c0 <SPI_Tx>
	CS_UnSelect();
 80004d6:	f7ff ff15 	bl	8000304 <CS_UnSelect>
}
 80004da:	bd13      	pop	{r0, r1, r4, pc}

080004dc <nrf24_reset>:
		nrf24_WriteReg(STATUS, 0x00);
 80004dc:	2100      	movs	r1, #0
{
 80004de:	b510      	push	{r4, lr}
	if (REG == STATUS)
 80004e0:	2807      	cmp	r0, #7
 80004e2:	d002      	beq.n	80004ea <nrf24_reset+0xe>
	else if (REG == FIFO_STATUS)
 80004e4:	2817      	cmp	r0, #23
 80004e6:	d103      	bne.n	80004f0 <nrf24_reset+0x14>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004e8:	2111      	movs	r1, #17
 80004ea:	f7ff ff29 	bl	8000340 <nrf24_WriteReg>
}
 80004ee:	bd10      	pop	{r4, pc}
 80004f0:	f7ff ff4a 	bl	8000388 <nrf24_reset.part.0>
 80004f4:	e7fb      	b.n	80004ee <nrf24_reset+0x12>
	...

080004f8 <NRF24_Init>:




void NRF24_Init (void)
{
 80004f8:	b510      	push	{r4, lr}
	 HAL_TIM_Base_Start(&htim17);
 80004fa:	4813      	ldr	r0, [pc, #76]	; (8000548 <NRF24_Init+0x50>)
 80004fc:	f001 fd6a 	bl	8001fd4 <HAL_TIM_Base_Start>
	// disable the chip before configuring the device
	CE_Disable();
 8000500:	f7ff ff14 	bl	800032c <CE_Disable>
	else if (REG == FIFO_STATUS)
 8000504:	f7ff ff40 	bl	8000388 <nrf24_reset.part.0>


	// reset everything
	nrf24_reset (0);

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000508:	2100      	movs	r1, #0
 800050a:	0008      	movs	r0, r1
 800050c:	f7ff ff18 	bl	8000340 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8000510:	2100      	movs	r1, #0
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ff14 	bl	8000340 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000518:	2100      	movs	r1, #0
 800051a:	2002      	movs	r0, #2
 800051c:	f7ff ff10 	bl	8000340 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000520:	2103      	movs	r1, #3
 8000522:	0008      	movs	r0, r1
 8000524:	f7ff ff0c 	bl	8000340 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000528:	2100      	movs	r1, #0
 800052a:	2004      	movs	r0, #4
 800052c:	f7ff ff08 	bl	8000340 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000530:	2100      	movs	r1, #0
 8000532:	2005      	movs	r0, #5
 8000534:	f7ff ff04 	bl	8000340 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000538:	210e      	movs	r1, #14
 800053a:	2006      	movs	r0, #6
 800053c:	f7ff ff00 	bl	8000340 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000540:	f7ff feea 	bl	8000318 <CE_Enable>

}
 8000544:	bd10      	pop	{r4, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	20000034 	.word	0x20000034

0800054c <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	000d      	movs	r5, r1
 8000550:	0004      	movs	r4, r0
	// disable the chip before configuring the device
	CE_Disable();
 8000552:	f7ff feeb 	bl	800032c <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000556:	0029      	movs	r1, r5
 8000558:	2005      	movs	r0, #5
 800055a:	f7ff fef1 	bl	8000340 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 800055e:	2205      	movs	r2, #5
 8000560:	0021      	movs	r1, r4
 8000562:	2010      	movs	r0, #16
 8000564:	f7ff fefb 	bl	800035e <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff ff91 	bl	8000490 <nrf24_ReadReg>
	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 800056e:	21f2      	movs	r1, #242	; 0xf2
 8000570:	4008      	ands	r0, r1
	nrf24_WriteReg (CONFIG, config);
 8000572:	39f0      	subs	r1, #240	; 0xf0
 8000574:	4301      	orrs	r1, r0
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff fee2 	bl	8000340 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	//CE_Enable();
}
 800057c:	bd70      	pop	{r4, r5, r6, pc}

0800057e <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 800057e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t cmdtosend = 0;
 8000580:	2400      	movs	r4, #0
 8000582:	466b      	mov	r3, sp
{
 8000584:	0006      	movs	r6, r0
	uint8_t cmdtosend = 0;
 8000586:	1ddd      	adds	r5, r3, #7
 8000588:	71dc      	strb	r4, [r3, #7]

	// select the device
	CS_Select();
 800058a:	f7ff feb1 	bl	80002f0 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 800058e:	23a0      	movs	r3, #160	; 0xa0
	SPI_Tx(&cmdtosend, 1);
 8000590:	2101      	movs	r1, #1
 8000592:	0028      	movs	r0, r5
	cmdtosend = W_TX_PAYLOAD;
 8000594:	702b      	strb	r3, [r5, #0]
	SPI_Tx(&cmdtosend, 1);
 8000596:	f7ff fe93 	bl	80002c0 <SPI_Tx>

	// send the payload
	SPI_Tx(data, 32);
 800059a:	2120      	movs	r1, #32
 800059c:	0030      	movs	r0, r6
 800059e:	f7ff fe8f 	bl	80002c0 <SPI_Tx>

	// Unselect the device
	CS_UnSelect();
 80005a2:	f7ff feaf 	bl	8000304 <CS_UnSelect>

	CE_Enable();
 80005a6:	f7ff feb7 	bl	8000318 <CE_Enable>
	NRF24_USER_DelayMicroSec(100);
 80005aa:	2064      	movs	r0, #100	; 0x64
 80005ac:	f7ff fe4c 	bl	8000248 <NRF24_USER_DelayMicroSec>
	CE_Disable();
 80005b0:	f7ff febc 	bl	800032c <CE_Disable>


	HAL_Delay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fa83 	bl	8000ac0 <HAL_Delay>
#warning make delay with _while

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80005ba:	2017      	movs	r0, #23
 80005bc:	f7ff ff68 	bl	8000490 <nrf24_ReadReg>

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80005c0:	2318      	movs	r3, #24
 80005c2:	4003      	ands	r3, r0
		nrf24_reset (FIFO_STATUS);

		return 1;
	}

	return 0;
 80005c4:	0020      	movs	r0, r4
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80005c6:	2b10      	cmp	r3, #16
 80005c8:	d107      	bne.n	80005da <NRF24_Transmit+0x5c>
		cmdtosend = FLUSH_TX;
 80005ca:	30e1      	adds	r0, #225	; 0xe1
 80005cc:	7028      	strb	r0, [r5, #0]
		nrfsendCmd(cmdtosend);
 80005ce:	f7ff ff78 	bl	80004c2 <nrfsendCmd>
		nrf24_reset (FIFO_STATUS);
 80005d2:	2017      	movs	r0, #23
 80005d4:	f7ff ff82 	bl	80004dc <nrf24_reset>
		return 1;
 80005d8:	2001      	movs	r0, #1
}
 80005da:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080005dc <HAL_SPI_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005dc:	b510      	push	{r4, lr}
	if(command == 0xAA)
 80005de:	4c09      	ldr	r4, [pc, #36]	; (8000604 <HAL_SPI_RxCpltCallback+0x28>)
 80005e0:	7823      	ldrb	r3, [r4, #0]
 80005e2:	2baa      	cmp	r3, #170	; 0xaa
 80005e4:	d107      	bne.n	80005f6 <HAL_SPI_RxCpltCallback+0x1a>
	{

		HAL_SPI_Receive(hspi, DownLink, 32, 100);
 80005e6:	2220      	movs	r2, #32
 80005e8:	3b46      	subs	r3, #70	; 0x46
 80005ea:	4907      	ldr	r1, [pc, #28]	; (8000608 <HAL_SPI_RxCpltCallback+0x2c>)
 80005ec:	f001 f9c8 	bl	8001980 <HAL_SPI_Receive>
		//HAL_GPIO_TogglePin(NRF_CE_GPIO_Port, NRF_CE_Pin);
		DownLink_cmd = 1;
 80005f0:	2201      	movs	r2, #1
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_SPI_RxCpltCallback+0x30>)
 80005f4:	701a      	strb	r2, [r3, #0]
	}
	HAL_SPI_Receive_IT(&hspi1, &command, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	0021      	movs	r1, r4
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <HAL_SPI_RxCpltCallback+0x34>)
 80005fc:	f001 fae4 	bl	8001bc8 <HAL_SPI_Receive_IT>
}
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000031 	.word	0x20000031
 8000608:	20000100 	.word	0x20000100
 800060c:	20000030 	.word	0x20000030
 8000610:	20000120 	.word	0x20000120

08000614 <LED_Blink>:



void LED_Blink()
{
 8000614:	b510      	push	{r4, lr}
 8000616:	240a      	movs	r4, #10
	for(uint8_t cnt = 0; cnt < 10; cnt++)
	{
		HAL_GPIO_TogglePin(NRF_CE_GPIO_Port, NRF_CE_Pin);
 8000618:	2101      	movs	r1, #1
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <LED_Blink+0x1c>)
 800061c:	3c01      	subs	r4, #1
 800061e:	f000 fbb5 	bl	8000d8c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000622:	b2e4      	uxtb	r4, r4
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 fa4b 	bl	8000ac0 <HAL_Delay>
	for(uint8_t cnt = 0; cnt < 10; cnt++)
 800062a:	2c00      	cmp	r4, #0
 800062c:	d1f4      	bne.n	8000618 <LED_Blink+0x4>
	}
}
 800062e:	bd10      	pop	{r4, pc}
 8000630:	48001400 	.word	0x48001400

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000636:	2610      	movs	r6, #16
{
 8000638:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	221c      	movs	r2, #28
 800063c:	2100      	movs	r1, #0
 800063e:	a809      	add	r0, sp, #36	; 0x24
 8000640:	f002 f8c3 	bl	80027ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	0032      	movs	r2, r6
 8000646:	2100      	movs	r1, #0
 8000648:	4668      	mov	r0, sp
 800064a:	f002 f8be 	bl	80027ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064e:	0032      	movs	r2, r6
 8000650:	2100      	movs	r1, #0
 8000652:	a804      	add	r0, sp, #16
 8000654:	f002 f8b9 	bl	80027ca <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000658:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000660:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800066e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000670:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f000 fb93 	bl	8000d9c <HAL_RCC_OscConfig>
 8000676:	2800      	cmp	r0, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000684:	0021      	movs	r1, r4
 8000686:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800068c:	f000 fdb8 	bl	8001200 <HAL_RCC_ClockConfig>
 8000690:	2800      	cmp	r0, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x64>
 8000694:	b672      	cpsid	i
  while (1)
 8000696:	e7fe      	b.n	8000696 <SystemClock_Config+0x62>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000698:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800069c:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069e:	f000 fe43 	bl	8001328 <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x76>
 80006a6:	b672      	cpsid	i
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <SystemClock_Config+0x74>
}
 80006aa:	b014      	add	sp, #80	; 0x50
 80006ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080006b0 <main>:
{
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	b088      	sub	sp, #32
  HAL_Init();
 80006b4:	f000 f9e2 	bl	8000a7c <HAL_Init>
  SystemClock_Config();
 80006b8:	f7ff ffbc 	bl	8000634 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	2214      	movs	r2, #20
 80006be:	2100      	movs	r1, #0
 80006c0:	a803      	add	r0, sp, #12
 80006c2:	f002 f882 	bl	80027ca <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	2080      	movs	r0, #128	; 0x80
 80006c8:	4b57      	ldr	r3, [pc, #348]	; (8000828 <main+0x178>)
 80006ca:	03c0      	lsls	r0, r0, #15
 80006cc:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(NRF_MOSI_GPIO_Port, NRF_MOSI_Pin, GPIO_PIN_RESET);
 80006ce:	2580      	movs	r5, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d0:	4301      	orrs	r1, r0
 80006d2:	6159      	str	r1, [r3, #20]
 80006d4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(NRF_MOSI_GPIO_Port, NRF_MOSI_Pin, GPIO_PIN_RESET);
 80006d6:	01ad      	lsls	r5, r5, #6
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d8:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006dc:	9200      	str	r2, [sp, #0]
 80006de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	6959      	ldr	r1, [r3, #20]
 80006e2:	0280      	lsls	r0, r0, #10
 80006e4:	4301      	orrs	r1, r0
 80006e6:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4002      	ands	r2, r0
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <main+0x17c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	400b      	ands	r3, r1
 8000702:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000704:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000708:	f000 fb3a 	bl	8000d80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2102      	movs	r1, #2
 8000710:	4846      	ldr	r0, [pc, #280]	; (800082c <main+0x17c>)
 8000712:	f000 fb35 	bl	8000d80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_SCK_GPIO_Port, NRF_SCK_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2102      	movs	r1, #2
 800071a:	4845      	ldr	r0, [pc, #276]	; (8000830 <main+0x180>)
 800071c:	f000 fb30 	bl	8000d80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_MOSI_GPIO_Port, NRF_MOSI_Pin, GPIO_PIN_RESET);
 8000720:	2090      	movs	r0, #144	; 0x90
 8000722:	2200      	movs	r2, #0
 8000724:	0029      	movs	r1, r5
 8000726:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(NRF_MOSI_GPIO_Port, NRF_MOSI_Pin, GPIO_PIN_RESET);
 800072a:	f000 fb29 	bl	8000d80 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin;
 8000730:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000732:	483e      	ldr	r0, [pc, #248]	; (800082c <main+0x17c>)
 8000734:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin;
 8000736:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800073e:	f000 fa63 	bl	8000c08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8000742:	2302      	movs	r3, #2
  HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8000744:	483a      	ldr	r0, [pc, #232]	; (8000830 <main+0x180>)
 8000746:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8000748:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8000750:	f000 fa5a 	bl	8000c08 <HAL_GPIO_Init>
  HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000754:	2090      	movs	r0, #144	; 0x90
 8000756:	a903      	add	r1, sp, #12
 8000758:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 800075a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000762:	f000 fa51 	bl	8000c08 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8000766:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8000768:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800076a:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800076c:	a903      	add	r1, sp, #12
 800076e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8000770:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8000776:	f000 fa47 	bl	8000c08 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800077a:	4d2e      	ldr	r5, [pc, #184]	; (8000834 <main+0x184>)
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <main+0x188>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077e:	0028      	movs	r0, r5
  hspi1.Instance = SPI1;
 8000780:	602b      	str	r3, [r5, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000782:	23e0      	movs	r3, #224	; 0xe0
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	60eb      	str	r3, [r5, #12]
  hspi1.Init.CRCPolynomial = 7;
 8000788:	2307      	movs	r3, #7
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800078a:	606c      	str	r4, [r5, #4]
  hspi1.Init.CRCPolynomial = 7;
 800078c:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	60ac      	str	r4, [r5, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000790:	612c      	str	r4, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000792:	616c      	str	r4, [r5, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000794:	61ac      	str	r4, [r5, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000796:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079a:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079c:	632c      	str	r4, [r5, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800079e:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	f000 ff70 	bl	8001684 <HAL_SPI_Init>
 80007a4:	0003      	movs	r3, r0
 80007a6:	42a0      	cmp	r0, r4
 80007a8:	d001      	beq.n	80007ae <main+0xfe>
 80007aa:	b672      	cpsid	i
  while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0xfc>
  htim17.Instance = TIM17;
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <main+0x18c>)
 80007b0:	4a23      	ldr	r2, [pc, #140]	; (8000840 <main+0x190>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	6083      	str	r3, [r0, #8]
  htim17.Instance = TIM17;
 80007b4:	6002      	str	r2, [r0, #0]
  htim17.Init.Prescaler = 48-1;
 80007b6:	222f      	movs	r2, #47	; 0x2f
 80007b8:	6042      	str	r2, [r0, #4]
  htim17.Init.Period = 65535;
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <main+0x194>)
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 80007be:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	6183      	str	r3, [r0, #24]
  htim17.Init.Period = 65535;
 80007c2:	60c2      	str	r2, [r0, #12]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007c4:	f001 fc6a 	bl	800209c <HAL_TIM_Base_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <main+0x120>
 80007cc:	b672      	cpsid	i
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x11e>
  huart1.Instance = USART1;
 80007d0:	481d      	ldr	r0, [pc, #116]	; (8000848 <main+0x198>)
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <main+0x19c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d4:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 80007d6:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 38400;
 80007d8:	2296      	movs	r2, #150	; 0x96
 80007da:	0212      	lsls	r2, r2, #8
 80007dc:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007de:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	f001 ff8d 	bl	800270c <HAL_UART_Init>
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d001      	beq.n	80007fa <main+0x14a>
 80007f6:	b672      	cpsid	i
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0x148>
  LED_Blink(); //Hello world
 80007fa:	f7ff ff0b 	bl	8000614 <LED_Blink>
  NRF24_Init();
 80007fe:	f7ff fe7b 	bl	80004f8 <NRF24_Init>
  NRF24_TxMode(TxAddress, 4);
 8000802:	2104      	movs	r1, #4
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <main+0x1a0>)
 8000806:	f7ff fea1 	bl	800054c <NRF24_TxMode>
  HAL_SPI_Receive_IT(&hspi1, &command, 1);
 800080a:	0032      	movs	r2, r6
 800080c:	0028      	movs	r0, r5
 800080e:	4911      	ldr	r1, [pc, #68]	; (8000854 <main+0x1a4>)
 8000810:	f001 f9da 	bl	8001bc8 <HAL_SPI_Receive_IT>
	  if(DownLink_cmd == 1)
 8000814:	4c10      	ldr	r4, [pc, #64]	; (8000858 <main+0x1a8>)
 8000816:	7823      	ldrb	r3, [r4, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d1fc      	bne.n	8000816 <main+0x166>
		  NRF24_Transmit(DownLink);
 800081c:	480f      	ldr	r0, [pc, #60]	; (800085c <main+0x1ac>)
 800081e:	f7ff feae 	bl	800057e <NRF24_Transmit>
		  DownLink_cmd = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	7023      	strb	r3, [r4, #0]
 8000826:	e7f5      	b.n	8000814 <main+0x164>
 8000828:	40021000 	.word	0x40021000
 800082c:	48001400 	.word	0x48001400
 8000830:	48000400 	.word	0x48000400
 8000834:	20000120 	.word	0x20000120
 8000838:	40013000 	.word	0x40013000
 800083c:	20000034 	.word	0x20000034
 8000840:	40014800 	.word	0x40014800
 8000844:	0000ffff 	.word	0x0000ffff
 8000848:	2000007c 	.word	0x2000007c
 800084c:	40013800 	.word	0x40013800
 8000850:	20000000 	.word	0x20000000
 8000854:	20000031 	.word	0x20000031
 8000858:	20000030 	.word	0x20000030
 800085c:	20000100 	.word	0x20000100

08000860 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000860:	2001      	movs	r0, #1
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_MspInit+0x2c>)
{
 8000864:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	6999      	ldr	r1, [r3, #24]
 8000868:	4301      	orrs	r1, r0
 800086a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4002      	ands	r2, r0
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	430a      	orrs	r2, r1
 800087c:	61da      	str	r2, [r3, #28]
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	400b      	ands	r3, r1
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	b002      	add	sp, #8
 8000888:	4770      	bx	lr
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000890:	b510      	push	{r4, lr}
 8000892:	0004      	movs	r4, r0
 8000894:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	2214      	movs	r2, #20
 8000898:	2100      	movs	r1, #0
 800089a:	a803      	add	r0, sp, #12
 800089c:	f001 ff95 	bl	80027ca <memset>
  if(hspi->Instance==SPI1)
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_SPI_MspInit+0x70>)
 80008a2:	6822      	ldr	r2, [r4, #0]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d128      	bne.n	80008fa <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a8:	2080      	movs	r0, #128	; 0x80
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_SPI_MspInit+0x74>)
 80008ac:	0140      	lsls	r0, r0, #5
 80008ae:	6999      	ldr	r1, [r3, #24]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b2:	4301      	orrs	r1, r0
 80008b4:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b8:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008bc:	4002      	ands	r2, r0
 80008be:	9201      	str	r2, [sp, #4]
 80008c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	430a      	orrs	r2, r1
 80008c8:	615a      	str	r2, [r3, #20]
 80008ca:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	400b      	ands	r3, r1
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008d4:	23f0      	movs	r3, #240	; 0xf0
 80008d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	3bee      	subs	r3, #238	; 0xee
 80008da:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008de:	3301      	adds	r3, #1
 80008e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008e4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f000 f98f 	bl	8000c08 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008ea:	2019      	movs	r0, #25
 80008ec:	0022      	movs	r2, r4
 80008ee:	0021      	movs	r1, r4
 80008f0:	f000 f8f8 	bl	8000ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008f4:	2019      	movs	r0, #25
 80008f6:	f000 f91f 	bl	8000b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008fa:	b008      	add	sp, #32
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40013000 	.word	0x40013000
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM17)
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_TIM_Base_MspInit+0x24>)
 800090a:	6802      	ldr	r2, [r0, #0]
{
 800090c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM17)
 800090e:	429a      	cmp	r2, r3
 8000910:	d109      	bne.n	8000926 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000912:	2080      	movs	r0, #128	; 0x80
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_TIM_Base_MspInit+0x28>)
 8000916:	02c0      	lsls	r0, r0, #11
 8000918:	6991      	ldr	r1, [r2, #24]
 800091a:	4301      	orrs	r1, r0
 800091c:	6191      	str	r1, [r2, #24]
 800091e:	6993      	ldr	r3, [r2, #24]
 8000920:	4003      	ands	r3, r0
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000926:	b002      	add	sp, #8
 8000928:	4770      	bx	lr
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40014800 	.word	0x40014800
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b510      	push	{r4, lr}
 8000936:	0004      	movs	r4, r0
 8000938:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	2214      	movs	r2, #20
 800093c:	2100      	movs	r1, #0
 800093e:	a803      	add	r0, sp, #12
 8000940:	f001 ff43 	bl	80027ca <memset>
  if(huart->Instance==USART1)
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x70>)
 8000946:	6822      	ldr	r2, [r4, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	d129      	bne.n	80009a0 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094c:	2080      	movs	r0, #128	; 0x80
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_UART_MspInit+0x74>)
 8000950:	01c0      	lsls	r0, r0, #7
 8000952:	6999      	ldr	r1, [r3, #24]
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000956:	4301      	orrs	r1, r0
 8000958:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800095c:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8000960:	4002      	ands	r2, r0
 8000962:	9201      	str	r2, [sp, #4]
 8000964:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	430a      	orrs	r2, r1
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	400b      	ands	r3, r1
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000978:	230c      	movs	r3, #12
 800097a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	3b0a      	subs	r3, #10
 800097e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	3301      	adds	r3, #1
 8000982:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000986:	3b02      	subs	r3, #2
 8000988:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f000 f93c 	bl	8000c08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000990:	201b      	movs	r0, #27
 8000992:	0022      	movs	r2, r4
 8000994:	0021      	movs	r1, r4
 8000996:	f000 f8a5 	bl	8000ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800099a:	201b      	movs	r0, #27
 800099c:	f000 f8cc 	bl	8000b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a0:	b008      	add	sp, #32
 80009a2:	bd10      	pop	{r4, pc}
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <NMI_Handler>

080009ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler>

080009b0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 f871 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bd10      	pop	{r4, pc}

080009bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009be:	4802      	ldr	r0, [pc, #8]	; (80009c8 <SPI1_IRQHandler+0xc>)
 80009c0:	f001 fa6e 	bl	8001ea0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000120 	.word	0x20000120

080009cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009ce:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USART1_IRQHandler+0xc>)
 80009d0:	f001 fbc8 	bl	8002164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d4:	bd10      	pop	{r4, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	2000007c 	.word	0x2000007c

080009dc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009dc:	4770      	bx	lr
	...

080009e0 <Reset_Handler>:
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <LoopForever+0x2>)
 80009e2:	4685      	mov	sp, r0
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x6>)
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopForever+0xa>)
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopForever+0xe>)
 80009ea:	2300      	movs	r3, #0
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:
 80009ee:	58d4      	ldr	r4, [r2, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:
 80009f4:	18c4      	adds	r4, r0, r3
 80009f6:	428c      	cmp	r4, r1
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopForever+0x12>)
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopForever+0x16>)
 80009fe:	2300      	movs	r3, #0
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:
 8000a06:	42a2      	cmp	r2, r4
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>
 8000a0a:	f7ff ffe7 	bl	80009dc <SystemInit>
 8000a0e:	f001 feaf 	bl	8002770 <__libc_init_array>
 8000a12:	f7ff fe4d 	bl	80006b0 <main>

08000a16 <LoopForever>:
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
 8000a18:	20001000 	.word	0x20001000
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000014 	.word	0x20000014
 8000a24:	08002848 	.word	0x08002848
 8000a28:	20000014 	.word	0x20000014
 8000a2c:	20000188 	.word	0x20000188

08000a30 <ADC1_IRQHandler>:
 8000a30:	e7fe      	b.n	8000a30 <ADC1_IRQHandler>
	...

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	20fa      	movs	r0, #250	; 0xfa
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_InitTick+0x3c>)
 8000a3c:	0080      	lsls	r0, r0, #2
 8000a3e:	7819      	ldrb	r1, [r3, #0]
 8000a40:	f7ff fb76 	bl	8000130 <__udivsi3>
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_InitTick+0x40>)
 8000a46:	0001      	movs	r1, r0
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f7ff fb71 	bl	8000130 <__udivsi3>
 8000a4e:	f000 f87f 	bl	8000b50 <HAL_SYSTICK_Config>
 8000a52:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000a54:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a56:	2c00      	cmp	r4, #0
 8000a58:	d109      	bne.n	8000a6e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	2d03      	cmp	r5, #3
 8000a5c:	d807      	bhi.n	8000a6e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	3802      	subs	r0, #2
 8000a60:	0022      	movs	r2, r4
 8000a62:	0029      	movs	r1, r5
 8000a64:	f000 f83e 	bl	8000ae4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	0020      	movs	r0, r4
 8000a6a:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_InitTick+0x44>)
 8000a6c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000010 	.word	0x20000010

08000a7c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_Init+0x1c>)
{
 8000a80:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a82:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a84:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a86:	430b      	orrs	r3, r1
 8000a88:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	f7ff ffd3 	bl	8000a34 <HAL_InitTick>
  HAL_MspInit();
 8000a8e:	f7ff fee7 	bl	8000860 <HAL_MspInit>
}
 8000a92:	2000      	movs	r0, #0
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a9c:	4a03      	ldr	r2, [pc, #12]	; (8000aac <HAL_IncTick+0x10>)
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <HAL_IncTick+0x14>)
 8000aa0:	6811      	ldr	r1, [r2, #0]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	185b      	adds	r3, r3, r1
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	4770      	bx	lr
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000184 	.word	0x20000184
 8000ab0:	2000000c 	.word	0x2000000c

08000ab4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ab4:	4b01      	ldr	r3, [pc, #4]	; (8000abc <HAL_GetTick+0x8>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
}
 8000ab8:	4770      	bx	lr
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	20000184 	.word	0x20000184

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff fff6 	bl	8000ab4 <HAL_GetTick>
 8000ac8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	1c63      	adds	r3, r4, #1
 8000acc:	d002      	beq.n	8000ad4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <HAL_Delay+0x20>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ad4:	f7ff ffee 	bl	8000ab4 <HAL_GetTick>
 8000ad8:	1b40      	subs	r0, r0, r5
 8000ada:	42a0      	cmp	r0, r4
 8000adc:	d3fa      	bcc.n	8000ad4 <HAL_Delay+0x14>
  {
  }
}
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	2000000c 	.word	0x2000000c

08000ae4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae4:	b530      	push	{r4, r5, lr}
 8000ae6:	25ff      	movs	r5, #255	; 0xff
 8000ae8:	2403      	movs	r4, #3
 8000aea:	002a      	movs	r2, r5
 8000aec:	4004      	ands	r4, r0
 8000aee:	00e4      	lsls	r4, r4, #3
 8000af0:	40a2      	lsls	r2, r4
 8000af2:	0189      	lsls	r1, r1, #6
 8000af4:	4029      	ands	r1, r5
 8000af6:	43d2      	mvns	r2, r2
 8000af8:	40a1      	lsls	r1, r4
 8000afa:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000afc:	2800      	cmp	r0, #0
 8000afe:	db0a      	blt.n	8000b16 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	24c0      	movs	r4, #192	; 0xc0
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_NVIC_SetPriority+0x4c>)
 8000b04:	0880      	lsrs	r0, r0, #2
 8000b06:	0080      	lsls	r0, r0, #2
 8000b08:	18c0      	adds	r0, r0, r3
 8000b0a:	00a4      	lsls	r4, r4, #2
 8000b0c:	5903      	ldr	r3, [r0, r4]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	4311      	orrs	r1, r2
 8000b12:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000b14:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b16:	200f      	movs	r0, #15
 8000b18:	4003      	ands	r3, r0
 8000b1a:	3b08      	subs	r3, #8
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_NVIC_SetPriority+0x50>)
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	181b      	adds	r3, r3, r0
 8000b24:	69d8      	ldr	r0, [r3, #28]
 8000b26:	4002      	ands	r2, r0
 8000b28:	4311      	orrs	r1, r2
 8000b2a:	61d9      	str	r1, [r3, #28]
 8000b2c:	e7f2      	b.n	8000b14 <HAL_NVIC_SetPriority+0x30>
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	db05      	blt.n	8000b48 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3c:	231f      	movs	r3, #31
 8000b3e:	4018      	ands	r0, r3
 8000b40:	3b1e      	subs	r3, #30
 8000b42:	4083      	lsls	r3, r0
 8000b44:	4a01      	ldr	r2, [pc, #4]	; (8000b4c <HAL_NVIC_EnableIRQ+0x14>)
 8000b46:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b48:	4770      	bx	lr
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	1e43      	subs	r3, r0, #1
 8000b54:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d20d      	bcs.n	8000b78 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b64:	6a03      	ldr	r3, [r0, #32]
 8000b66:	0609      	lsls	r1, r1, #24
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	0a1b      	lsrs	r3, r3, #8
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b78:	4770      	bx	lr
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	e000e010 	.word	0xe000e010
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b84:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b86:	1c85      	adds	r5, r0, #2
 8000b88:	7feb      	ldrb	r3, [r5, #31]
 8000b8a:	1c44      	adds	r4, r0, #1
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d005      	beq.n	8000b9c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b90:	2304      	movs	r3, #4
 8000b92:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b94:	2300      	movs	r3, #0
    
    return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000b98:	77e3      	strb	r3, [r4, #31]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8000b9a:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b9c:	210e      	movs	r1, #14
 8000b9e:	6803      	ldr	r3, [r0, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	438a      	bics	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	4391      	bics	r1, r2
 8000bac:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000bb0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	4088      	lsls	r0, r1
 8000bb6:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8000bb8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8000bba:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8000bbc:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8000bbe:	e7ec      	b.n	8000b9a <HAL_DMA_Abort+0x16>

08000bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bc0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc2:	1c84      	adds	r4, r0, #2
 8000bc4:	7fe3      	ldrb	r3, [r4, #31]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d004      	beq.n	8000bd4 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bce:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd4:	210e      	movs	r1, #14
 8000bd6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bd8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	438a      	bics	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000be0:	2201      	movs	r2, #1
 8000be2:	6819      	ldr	r1, [r3, #0]
 8000be4:	4391      	bics	r1, r2
 8000be6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000be8:	0011      	movs	r1, r2
 8000bea:	40a9      	lsls	r1, r5
 8000bec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000bee:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000bf0:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	1883      	adds	r3, r0, r2
 8000bf6:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8000bf8:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8000bfa:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	d0e7      	beq.n	8000bd0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000c00:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000c02:	0023      	movs	r3, r4
 8000c04:	e7e4      	b.n	8000bd0 <HAL_DMA_Abort_IT+0x10>
	...

08000c08 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000c08:	2300      	movs	r3, #0
{
 8000c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	680a      	ldr	r2, [r1, #0]
 8000c10:	0014      	movs	r4, r2
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	d101      	bne.n	8000c1a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000c16:	b007      	add	sp, #28
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c1a:	2501      	movs	r5, #1
 8000c1c:	0014      	movs	r4, r2
 8000c1e:	409d      	lsls	r5, r3
 8000c20:	402c      	ands	r4, r5
 8000c22:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000c24:	422a      	tst	r2, r5
 8000c26:	d100      	bne.n	8000c2a <HAL_GPIO_Init+0x22>
 8000c28:	e095      	b.n	8000d56 <HAL_GPIO_Init+0x14e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2a:	684a      	ldr	r2, [r1, #4]
 8000c2c:	005e      	lsls	r6, r3, #1
 8000c2e:	4694      	mov	ip, r2
 8000c30:	2203      	movs	r2, #3
 8000c32:	4664      	mov	r4, ip
 8000c34:	4022      	ands	r2, r4
 8000c36:	2403      	movs	r4, #3
 8000c38:	40b4      	lsls	r4, r6
 8000c3a:	43e4      	mvns	r4, r4
 8000c3c:	9402      	str	r4, [sp, #8]
 8000c3e:	1e54      	subs	r4, r2, #1
 8000c40:	2c01      	cmp	r4, #1
 8000c42:	d82a      	bhi.n	8000c9a <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8000c44:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c46:	9c02      	ldr	r4, [sp, #8]
 8000c48:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c4a:	68cc      	ldr	r4, [r1, #12]
 8000c4c:	40b4      	lsls	r4, r6
 8000c4e:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8000c50:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c52:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c54:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c56:	43ac      	bics	r4, r5
 8000c58:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5a:	4664      	mov	r4, ip
 8000c5c:	0924      	lsrs	r4, r4, #4
 8000c5e:	403c      	ands	r4, r7
 8000c60:	409c      	lsls	r4, r3
 8000c62:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000c64:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c66:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c68:	9c02      	ldr	r4, [sp, #8]
 8000c6a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c6c:	688c      	ldr	r4, [r1, #8]
 8000c6e:	40b4      	lsls	r4, r6
 8000c70:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000c72:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c74:	2a02      	cmp	r2, #2
 8000c76:	d112      	bne.n	8000c9e <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8000c78:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c7a:	2507      	movs	r5, #7
 8000c7c:	00a4      	lsls	r4, r4, #2
 8000c7e:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8000c80:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c82:	9403      	str	r4, [sp, #12]
 8000c84:	240f      	movs	r4, #15
 8000c86:	401d      	ands	r5, r3
 8000c88:	00ad      	lsls	r5, r5, #2
 8000c8a:	40ac      	lsls	r4, r5
 8000c8c:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8e:	690c      	ldr	r4, [r1, #16]
 8000c90:	40ac      	lsls	r4, r5
 8000c92:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000c94:	9c03      	ldr	r4, [sp, #12]
 8000c96:	6227      	str	r7, [r4, #32]
 8000c98:	e001      	b.n	8000c9e <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9a:	2a03      	cmp	r2, #3
 8000c9c:	d1e3      	bne.n	8000c66 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8000c9e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca0:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca2:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca4:	4025      	ands	r5, r4
 8000ca6:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca8:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000caa:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cac:	24c0      	movs	r4, #192	; 0xc0
 8000cae:	4662      	mov	r2, ip
 8000cb0:	02a4      	lsls	r4, r4, #10
 8000cb2:	4222      	tst	r2, r4
 8000cb4:	d04f      	beq.n	8000d56 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2501      	movs	r5, #1
 8000cb8:	4a28      	ldr	r2, [pc, #160]	; (8000d5c <HAL_GPIO_Init+0x154>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cba:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbc:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cbe:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	6194      	str	r4, [r2, #24]
 8000cc4:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc6:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	402a      	ands	r2, r5
 8000cca:	9205      	str	r2, [sp, #20]
 8000ccc:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <HAL_GPIO_Init+0x158>)
 8000cd0:	00a4      	lsls	r4, r4, #2
 8000cd2:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	3502      	adds	r5, #2
 8000cd8:	401d      	ands	r5, r3
 8000cda:	00ad      	lsls	r5, r5, #2
 8000cdc:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cde:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ce0:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	42b8      	cmp	r0, r7
 8000ce6:	d00c      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000ce8:	4f1e      	ldr	r7, [pc, #120]	; (8000d64 <HAL_GPIO_Init+0x15c>)
 8000cea:	3201      	adds	r2, #1
 8000cec:	42b8      	cmp	r0, r7
 8000cee:	d008      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000cf0:	4f1d      	ldr	r7, [pc, #116]	; (8000d68 <HAL_GPIO_Init+0x160>)
 8000cf2:	3201      	adds	r2, #1
 8000cf4:	42b8      	cmp	r0, r7
 8000cf6:	d004      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000cf8:	4f1c      	ldr	r7, [pc, #112]	; (8000d6c <HAL_GPIO_Init+0x164>)
 8000cfa:	3201      	adds	r2, #1
 8000cfc:	42b8      	cmp	r0, r7
 8000cfe:	d000      	beq.n	8000d02 <HAL_GPIO_Init+0xfa>
 8000d00:	3202      	adds	r2, #2
 8000d02:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d04:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d06:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d08:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_GPIO_Init+0x168>)
        temp &= ~(iocurrent);
 8000d0c:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000d0e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000d10:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8000d12:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000d14:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d16:	03ff      	lsls	r7, r7, #15
 8000d18:	d401      	bmi.n	8000d1e <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8000d1a:	0035      	movs	r5, r6
 8000d1c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d1e:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000d20:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d22:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000d24:	9d01      	ldr	r5, [sp, #4]
 8000d26:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d28:	03bf      	lsls	r7, r7, #14
 8000d2a:	d401      	bmi.n	8000d30 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8000d2c:	0035      	movs	r5, r6
 8000d2e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d30:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000d32:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d34:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000d36:	9d01      	ldr	r5, [sp, #4]
 8000d38:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d3a:	02ff      	lsls	r7, r7, #11
 8000d3c:	d401      	bmi.n	8000d42 <HAL_GPIO_Init+0x13a>
        temp &= ~(iocurrent);
 8000d3e:	0035      	movs	r5, r6
 8000d40:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d42:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000d44:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d46:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000d48:	9e01      	ldr	r6, [sp, #4]
 8000d4a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4c:	02bf      	lsls	r7, r7, #10
 8000d4e:	d401      	bmi.n	8000d54 <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 8000d50:	4025      	ands	r5, r4
 8000d52:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000d54:	60d6      	str	r6, [r2, #12]
    position++;
 8000d56:	3301      	adds	r3, #1
 8000d58:	e759      	b.n	8000c0e <HAL_GPIO_Init+0x6>
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000
 8000d64:	48000400 	.word	0x48000400
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	48000c00 	.word	0x48000c00
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d74:	6900      	ldr	r0, [r0, #16]
 8000d76:	4008      	ands	r0, r1
 8000d78:	1e41      	subs	r1, r0, #1
 8000d7a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000d7c:	b2c0      	uxtb	r0, r0
  }
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d84:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d86:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d88:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000d8a:	e7fc      	b.n	8000d86 <HAL_GPIO_WritePin+0x6>

08000d8c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d8c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d8e:	0013      	movs	r3, r2
 8000d90:	400b      	ands	r3, r1
 8000d92:	041b      	lsls	r3, r3, #16
 8000d94:	4391      	bics	r1, r2
 8000d96:	4319      	orrs	r1, r3
 8000d98:	6181      	str	r1, [r0, #24]
}
 8000d9a:	4770      	bx	lr

08000d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	0004      	movs	r4, r0
 8000da0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d045      	beq.n	8000e32 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	07db      	lsls	r3, r3, #31
 8000daa:	d42f      	bmi.n	8000e0c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	079b      	lsls	r3, r3, #30
 8000db0:	d500      	bpl.n	8000db4 <HAL_RCC_OscConfig+0x18>
 8000db2:	e081      	b.n	8000eb8 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	071b      	lsls	r3, r3, #28
 8000db8:	d500      	bpl.n	8000dbc <HAL_RCC_OscConfig+0x20>
 8000dba:	e0bc      	b.n	8000f36 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	075b      	lsls	r3, r3, #29
 8000dc0:	d500      	bpl.n	8000dc4 <HAL_RCC_OscConfig+0x28>
 8000dc2:	e0df      	b.n	8000f84 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	06db      	lsls	r3, r3, #27
 8000dc8:	d51a      	bpl.n	8000e00 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000dca:	6962      	ldr	r2, [r4, #20]
 8000dcc:	2304      	movs	r3, #4
 8000dce:	4db5      	ldr	r5, [pc, #724]	; (80010a4 <HAL_RCC_OscConfig+0x308>)
 8000dd0:	2a01      	cmp	r2, #1
 8000dd2:	d000      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x3a>
 8000dd4:	e14a      	b.n	800106c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dd6:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dd8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000dde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000de0:	431a      	orrs	r2, r3
 8000de2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000de4:	f7ff fe66 	bl	8000ab4 <HAL_GetTick>
 8000de8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000dec:	423b      	tst	r3, r7
 8000dee:	d100      	bne.n	8000df2 <HAL_RCC_OscConfig+0x56>
 8000df0:	e135      	b.n	800105e <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000df2:	21f8      	movs	r1, #248	; 0xf8
 8000df4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000df6:	69a3      	ldr	r3, [r4, #24]
 8000df8:	438a      	bics	r2, r1
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e00:	6a23      	ldr	r3, [r4, #32]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d000      	beq.n	8000e08 <HAL_RCC_OscConfig+0x6c>
 8000e06:	e159      	b.n	80010bc <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 8000e08:	2000      	movs	r0, #0
 8000e0a:	e02a      	b.n	8000e62 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e0c:	210c      	movs	r1, #12
 8000e0e:	4da5      	ldr	r5, [pc, #660]	; (80010a4 <HAL_RCC_OscConfig+0x308>)
 8000e10:	686a      	ldr	r2, [r5, #4]
 8000e12:	400a      	ands	r2, r1
 8000e14:	2a04      	cmp	r2, #4
 8000e16:	d006      	beq.n	8000e26 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e18:	686b      	ldr	r3, [r5, #4]
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d10a      	bne.n	8000e36 <HAL_RCC_OscConfig+0x9a>
 8000e20:	686b      	ldr	r3, [r5, #4]
 8000e22:	03db      	lsls	r3, r3, #15
 8000e24:	d507      	bpl.n	8000e36 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e26:	682b      	ldr	r3, [r5, #0]
 8000e28:	039b      	lsls	r3, r3, #14
 8000e2a:	d5bf      	bpl.n	8000dac <HAL_RCC_OscConfig+0x10>
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1bc      	bne.n	8000dac <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
 8000e34:	e015      	b.n	8000e62 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e36:	6863      	ldr	r3, [r4, #4]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d114      	bne.n	8000e66 <HAL_RCC_OscConfig+0xca>
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	682a      	ldr	r2, [r5, #0]
 8000e40:	025b      	lsls	r3, r3, #9
 8000e42:	4313      	orrs	r3, r2
 8000e44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e46:	f7ff fe35 	bl	8000ab4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e4c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	02bf      	lsls	r7, r7, #10
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	423b      	tst	r3, r7
 8000e54:	d1aa      	bne.n	8000dac <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e56:	f7ff fe2d 	bl	8000ab4 <HAL_GetTick>
 8000e5a:	1b80      	subs	r0, r0, r6
 8000e5c:	2864      	cmp	r0, #100	; 0x64
 8000e5e:	d9f7      	bls.n	8000e50 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8000e60:	2003      	movs	r0, #3
}
 8000e62:	b005      	add	sp, #20
 8000e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d116      	bne.n	8000e98 <HAL_RCC_OscConfig+0xfc>
 8000e6a:	682b      	ldr	r3, [r5, #0]
 8000e6c:	4a8e      	ldr	r2, [pc, #568]	; (80010a8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e70:	4013      	ands	r3, r2
 8000e72:	602b      	str	r3, [r5, #0]
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	4a8d      	ldr	r2, [pc, #564]	; (80010ac <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e78:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fe19 	bl	8000ab4 <HAL_GetTick>
 8000e82:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e84:	682b      	ldr	r3, [r5, #0]
 8000e86:	423b      	tst	r3, r7
 8000e88:	d100      	bne.n	8000e8c <HAL_RCC_OscConfig+0xf0>
 8000e8a:	e78f      	b.n	8000dac <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fe12 	bl	8000ab4 <HAL_GetTick>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	2864      	cmp	r0, #100	; 0x64
 8000e94:	d9f6      	bls.n	8000e84 <HAL_RCC_OscConfig+0xe8>
 8000e96:	e7e3      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d105      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x10c>
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	682a      	ldr	r2, [r5, #0]
 8000ea0:	02db      	lsls	r3, r3, #11
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	602b      	str	r3, [r5, #0]
 8000ea6:	e7c9      	b.n	8000e3c <HAL_RCC_OscConfig+0xa0>
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	4a7f      	ldr	r2, [pc, #508]	; (80010a8 <HAL_RCC_OscConfig+0x30c>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	602b      	str	r3, [r5, #0]
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	4a7e      	ldr	r2, [pc, #504]	; (80010ac <HAL_RCC_OscConfig+0x310>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	e7c5      	b.n	8000e44 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eb8:	220c      	movs	r2, #12
 8000eba:	4d7a      	ldr	r5, [pc, #488]	; (80010a4 <HAL_RCC_OscConfig+0x308>)
 8000ebc:	686b      	ldr	r3, [r5, #4]
 8000ebe:	4213      	tst	r3, r2
 8000ec0:	d006      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ec2:	686b      	ldr	r3, [r5, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d110      	bne.n	8000eec <HAL_RCC_OscConfig+0x150>
 8000eca:	686b      	ldr	r3, [r5, #4]
 8000ecc:	03db      	lsls	r3, r3, #15
 8000ece:	d40d      	bmi.n	8000eec <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	079b      	lsls	r3, r3, #30
 8000ed4:	d502      	bpl.n	8000edc <HAL_RCC_OscConfig+0x140>
 8000ed6:	68e3      	ldr	r3, [r4, #12]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1aa      	bne.n	8000e32 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000edc:	21f8      	movs	r1, #248	; 0xf8
 8000ede:	682a      	ldr	r2, [r5, #0]
 8000ee0:	6923      	ldr	r3, [r4, #16]
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	602b      	str	r3, [r5, #0]
 8000eea:	e763      	b.n	8000db4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eec:	68e2      	ldr	r2, [r4, #12]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d00f      	beq.n	8000f14 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000ef4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000efc:	f7ff fdda 	bl	8000ab4 <HAL_GetTick>
 8000f00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	423b      	tst	r3, r7
 8000f06:	d1e9      	bne.n	8000edc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f08:	f7ff fdd4 	bl	8000ab4 <HAL_GetTick>
 8000f0c:	1b80      	subs	r0, r0, r6
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d9f7      	bls.n	8000f02 <HAL_RCC_OscConfig+0x166>
 8000f12:	e7a5      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8000f14:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f16:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000f18:	439a      	bics	r2, r3
 8000f1a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fdca 	bl	8000ab4 <HAL_GetTick>
 8000f20:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	423b      	tst	r3, r7
 8000f26:	d100      	bne.n	8000f2a <HAL_RCC_OscConfig+0x18e>
 8000f28:	e744      	b.n	8000db4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fdc3 	bl	8000ab4 <HAL_GetTick>
 8000f2e:	1b80      	subs	r0, r0, r6
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d9f6      	bls.n	8000f22 <HAL_RCC_OscConfig+0x186>
 8000f34:	e794      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f36:	69e2      	ldr	r2, [r4, #28]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4d5a      	ldr	r5, [pc, #360]	; (80010a4 <HAL_RCC_OscConfig+0x308>)
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d010      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000f40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f42:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000f44:	4313      	orrs	r3, r2
 8000f46:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f48:	f7ff fdb4 	bl	8000ab4 <HAL_GetTick>
 8000f4c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f50:	423b      	tst	r3, r7
 8000f52:	d000      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1ba>
 8000f54:	e732      	b.n	8000dbc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f56:	f7ff fdad 	bl	8000ab4 <HAL_GetTick>
 8000f5a:	1b80      	subs	r0, r0, r6
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d9f6      	bls.n	8000f4e <HAL_RCC_OscConfig+0x1b2>
 8000f60:	e77e      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8000f62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f64:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000f66:	439a      	bics	r2, r3
 8000f68:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fda3 	bl	8000ab4 <HAL_GetTick>
 8000f6e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f72:	423b      	tst	r3, r7
 8000f74:	d100      	bne.n	8000f78 <HAL_RCC_OscConfig+0x1dc>
 8000f76:	e721      	b.n	8000dbc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f78:	f7ff fd9c 	bl	8000ab4 <HAL_GetTick>
 8000f7c:	1b80      	subs	r0, r0, r6
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9f6      	bls.n	8000f70 <HAL_RCC_OscConfig+0x1d4>
 8000f82:	e76d      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f84:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f86:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f88:	4d46      	ldr	r5, [pc, #280]	; (80010a4 <HAL_RCC_OscConfig+0x308>)
 8000f8a:	0552      	lsls	r2, r2, #21
 8000f8c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f8e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f90:	4213      	tst	r3, r2
 8000f92:	d108      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	69eb      	ldr	r3, [r5, #28]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61eb      	str	r3, [r5, #28]
 8000f9a:	69eb      	ldr	r3, [r5, #28]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	9303      	str	r3, [sp, #12]
 8000fa0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	2780      	movs	r7, #128	; 0x80
 8000fa8:	4e41      	ldr	r6, [pc, #260]	; (80010b0 <HAL_RCC_OscConfig+0x314>)
 8000faa:	007f      	lsls	r7, r7, #1
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	423b      	tst	r3, r7
 8000fb0:	d006      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb2:	68a3      	ldr	r3, [r4, #8]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d113      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x244>
 8000fb8:	6a2a      	ldr	r2, [r5, #32]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	622b      	str	r3, [r5, #32]
 8000fbe:	e030      	b.n	8001022 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc0:	6833      	ldr	r3, [r6, #0]
 8000fc2:	433b      	orrs	r3, r7
 8000fc4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fd75 	bl	8000ab4 <HAL_GetTick>
 8000fca:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fcc:	6833      	ldr	r3, [r6, #0]
 8000fce:	423b      	tst	r3, r7
 8000fd0:	d1ef      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd2:	f7ff fd6f 	bl	8000ab4 <HAL_GetTick>
 8000fd6:	9b01      	ldr	r3, [sp, #4]
 8000fd8:	1ac0      	subs	r0, r0, r3
 8000fda:	2864      	cmp	r0, #100	; 0x64
 8000fdc:	d9f6      	bls.n	8000fcc <HAL_RCC_OscConfig+0x230>
 8000fde:	e73f      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d114      	bne.n	8001010 <HAL_RCC_OscConfig+0x274>
 8000fe6:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe8:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fea:	4393      	bics	r3, r2
 8000fec:	622b      	str	r3, [r5, #32]
 8000fee:	6a2b      	ldr	r3, [r5, #32]
 8000ff0:	3203      	adds	r2, #3
 8000ff2:	4393      	bics	r3, r2
 8000ff4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fd5d 	bl	8000ab4 <HAL_GetTick>
 8000ffa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffc:	6a2b      	ldr	r3, [r5, #32]
 8000ffe:	423b      	tst	r3, r7
 8001000:	d016      	beq.n	8001030 <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff fd57 	bl	8000ab4 <HAL_GetTick>
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_RCC_OscConfig+0x318>)
 8001008:	1b80      	subs	r0, r0, r6
 800100a:	4298      	cmp	r0, r3
 800100c:	d9f6      	bls.n	8000ffc <HAL_RCC_OscConfig+0x260>
 800100e:	e727      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001010:	2b05      	cmp	r3, #5
 8001012:	d116      	bne.n	8001042 <HAL_RCC_OscConfig+0x2a6>
 8001014:	6a29      	ldr	r1, [r5, #32]
 8001016:	3b01      	subs	r3, #1
 8001018:	430b      	orrs	r3, r1
 800101a:	622b      	str	r3, [r5, #32]
 800101c:	6a2b      	ldr	r3, [r5, #32]
 800101e:	431a      	orrs	r2, r3
 8001020:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001022:	f7ff fd47 	bl	8000ab4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001026:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001028:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102a:	6a2b      	ldr	r3, [r5, #32]
 800102c:	423b      	tst	r3, r7
 800102e:	d00f      	beq.n	8001050 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8001030:	9b00      	ldr	r3, [sp, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d000      	beq.n	8001038 <HAL_RCC_OscConfig+0x29c>
 8001036:	e6c5      	b.n	8000dc4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001038:	69eb      	ldr	r3, [r5, #28]
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <HAL_RCC_OscConfig+0x31c>)
 800103c:	4013      	ands	r3, r2
 800103e:	61eb      	str	r3, [r5, #28]
 8001040:	e6c0      	b.n	8000dc4 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001042:	6a2b      	ldr	r3, [r5, #32]
 8001044:	4393      	bics	r3, r2
 8001046:	2204      	movs	r2, #4
 8001048:	622b      	str	r3, [r5, #32]
 800104a:	6a2b      	ldr	r3, [r5, #32]
 800104c:	4393      	bics	r3, r2
 800104e:	e7b5      	b.n	8000fbc <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f7ff fd30 	bl	8000ab4 <HAL_GetTick>
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_RCC_OscConfig+0x318>)
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	4298      	cmp	r0, r3
 800105a:	d9e6      	bls.n	800102a <HAL_RCC_OscConfig+0x28e>
 800105c:	e700      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800105e:	f7ff fd29 	bl	8000ab4 <HAL_GetTick>
 8001062:	1b80      	subs	r0, r0, r6
 8001064:	2802      	cmp	r0, #2
 8001066:	d800      	bhi.n	800106a <HAL_RCC_OscConfig+0x2ce>
 8001068:	e6bf      	b.n	8000dea <HAL_RCC_OscConfig+0x4e>
 800106a:	e6f9      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800106c:	3205      	adds	r2, #5
 800106e:	d103      	bne.n	8001078 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001070:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001072:	439a      	bics	r2, r3
 8001074:	636a      	str	r2, [r5, #52]	; 0x34
 8001076:	e6bc      	b.n	8000df2 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001078:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800107a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800107c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800107e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001080:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001082:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001084:	4393      	bics	r3, r2
 8001086:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001088:	f7ff fd14 	bl	8000ab4 <HAL_GetTick>
 800108c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800108e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001090:	423b      	tst	r3, r7
 8001092:	d100      	bne.n	8001096 <HAL_RCC_OscConfig+0x2fa>
 8001094:	e6b4      	b.n	8000e00 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001096:	f7ff fd0d 	bl	8000ab4 <HAL_GetTick>
 800109a:	1b80      	subs	r0, r0, r6
 800109c:	2802      	cmp	r0, #2
 800109e:	d9f6      	bls.n	800108e <HAL_RCC_OscConfig+0x2f2>
 80010a0:	e6de      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	40021000 	.word	0x40021000
 80010a8:	fffeffff 	.word	0xfffeffff
 80010ac:	fffbffff 	.word	0xfffbffff
 80010b0:	40007000 	.word	0x40007000
 80010b4:	00001388 	.word	0x00001388
 80010b8:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010bc:	200c      	movs	r0, #12
 80010be:	4a34      	ldr	r2, [pc, #208]	; (8001190 <HAL_RCC_OscConfig+0x3f4>)
 80010c0:	6851      	ldr	r1, [r2, #4]
 80010c2:	0015      	movs	r5, r2
 80010c4:	4001      	ands	r1, r0
 80010c6:	2908      	cmp	r1, #8
 80010c8:	d047      	beq.n	800115a <HAL_RCC_OscConfig+0x3be>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ca:	4a32      	ldr	r2, [pc, #200]	; (8001194 <HAL_RCC_OscConfig+0x3f8>)
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d132      	bne.n	8001136 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 80010d0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80010d4:	4013      	ands	r3, r2
 80010d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010d8:	f7ff fcec 	bl	8000ab4 <HAL_GetTick>
 80010dc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	04bf      	lsls	r7, r7, #18
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	423b      	tst	r3, r7
 80010e4:	d121      	bne.n	800112a <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010e6:	220f      	movs	r2, #15
 80010e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ea:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ec:	4393      	bics	r3, r2
 80010ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f0:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f2:	4313      	orrs	r3, r2
 80010f4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80010f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010fa:	686a      	ldr	r2, [r5, #4]
 80010fc:	430b      	orrs	r3, r1
 80010fe:	4926      	ldr	r1, [pc, #152]	; (8001198 <HAL_RCC_OscConfig+0x3fc>)
 8001100:	400a      	ands	r2, r1
 8001102:	4313      	orrs	r3, r2
 8001104:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	682a      	ldr	r2, [r5, #0]
 800110a:	045b      	lsls	r3, r3, #17
 800110c:	4313      	orrs	r3, r2
 800110e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001110:	f7ff fcd0 	bl	8000ab4 <HAL_GetTick>
 8001114:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	4233      	tst	r3, r6
 800111a:	d000      	beq.n	800111e <HAL_RCC_OscConfig+0x382>
 800111c:	e674      	b.n	8000e08 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fcc9 	bl	8000ab4 <HAL_GetTick>
 8001122:	1b00      	subs	r0, r0, r4
 8001124:	2802      	cmp	r0, #2
 8001126:	d9f6      	bls.n	8001116 <HAL_RCC_OscConfig+0x37a>
 8001128:	e69a      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fcc3 	bl	8000ab4 <HAL_GetTick>
 800112e:	1b80      	subs	r0, r0, r6
 8001130:	2802      	cmp	r0, #2
 8001132:	d9d5      	bls.n	80010e0 <HAL_RCC_OscConfig+0x344>
 8001134:	e694      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8001136:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001138:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800113a:	4013      	ands	r3, r2
 800113c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800113e:	f7ff fcb9 	bl	8000ab4 <HAL_GetTick>
 8001142:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001144:	04b6      	lsls	r6, r6, #18
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	4233      	tst	r3, r6
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x3b2>
 800114c:	e65c      	b.n	8000e08 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fcb1 	bl	8000ab4 <HAL_GetTick>
 8001152:	1b00      	subs	r0, r0, r4
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f6      	bls.n	8001146 <HAL_RCC_OscConfig+0x3aa>
 8001158:	e682      	b.n	8000e60 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 800115a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800115c:	2b01      	cmp	r3, #1
 800115e:	d100      	bne.n	8001162 <HAL_RCC_OscConfig+0x3c6>
 8001160:	e67f      	b.n	8000e62 <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001162:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001164:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001168:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 800116a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800116c:	4019      	ands	r1, r3
 800116e:	4281      	cmp	r1, r0
 8001170:	d000      	beq.n	8001174 <HAL_RCC_OscConfig+0x3d8>
 8001172:	e65e      	b.n	8000e32 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001174:	210f      	movs	r1, #15
 8001176:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001178:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800117a:	428a      	cmp	r2, r1
 800117c:	d000      	beq.n	8001180 <HAL_RCC_OscConfig+0x3e4>
 800117e:	e658      	b.n	8000e32 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001180:	22f0      	movs	r2, #240	; 0xf0
 8001182:	0392      	lsls	r2, r2, #14
 8001184:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001186:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001188:	4293      	cmp	r3, r2
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x3f2>
 800118c:	e63c      	b.n	8000e08 <HAL_RCC_OscConfig+0x6c>
 800118e:	e650      	b.n	8000e32 <HAL_RCC_OscConfig+0x96>
 8001190:	40021000 	.word	0x40021000
 8001194:	feffffff 	.word	0xfeffffff
 8001198:	ffc2ffff 	.word	0xffc2ffff

0800119c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80011a0:	2210      	movs	r2, #16
 80011a2:	4912      	ldr	r1, [pc, #72]	; (80011ec <HAL_RCC_GetSysClockFreq+0x50>)
 80011a4:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80011a6:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80011a8:	f001 fb06 	bl	80027b8 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80011ac:	2210      	movs	r2, #16
 80011ae:	0028      	movs	r0, r5
 80011b0:	490f      	ldr	r1, [pc, #60]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x54>)
 80011b2:	f001 fb01 	bl	80027b8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80011b8:	4e0e      	ldr	r6, [pc, #56]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80011ba:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011bc:	401a      	ands	r2, r3
 80011be:	2a08      	cmp	r2, #8
 80011c0:	d111      	bne.n	80011e6 <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80011c2:	200f      	movs	r0, #15
 80011c4:	466a      	mov	r2, sp
 80011c6:	0c99      	lsrs	r1, r3, #18
 80011c8:	4001      	ands	r1, r0
 80011ca:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80011cc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80011ce:	4002      	ands	r2, r0
 80011d0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80011d2:	03db      	lsls	r3, r3, #15
 80011d4:	d505      	bpl.n	80011e2 <HAL_RCC_GetSysClockFreq+0x46>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80011d8:	f7fe ffaa 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80011dc:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011de:	b008      	add	sp, #32
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <HAL_RCC_GetSysClockFreq+0x60>)
 80011e4:	e7fa      	b.n	80011dc <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = HSE_VALUE;
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80011e8:	e7f9      	b.n	80011de <HAL_RCC_GetSysClockFreq+0x42>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	08002818 	.word	0x08002818
 80011f0:	08002829 	.word	0x08002829
 80011f4:	40021000 	.word	0x40021000
 80011f8:	007a1200 	.word	0x007a1200
 80011fc:	003d0900 	.word	0x003d0900

08001200 <HAL_RCC_ClockConfig>:
{
 8001200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001202:	0005      	movs	r5, r0
 8001204:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001206:	2800      	cmp	r0, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
}
 800120c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800120e:	2201      	movs	r2, #1
 8001210:	4c37      	ldr	r4, [pc, #220]	; (80012f0 <HAL_RCC_ClockConfig+0xf0>)
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	4013      	ands	r3, r2
 8001216:	428b      	cmp	r3, r1
 8001218:	d31c      	bcc.n	8001254 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800121a:	6829      	ldr	r1, [r5, #0]
 800121c:	078b      	lsls	r3, r1, #30
 800121e:	d422      	bmi.n	8001266 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001220:	07cb      	lsls	r3, r1, #31
 8001222:	d42f      	bmi.n	8001284 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001224:	2301      	movs	r3, #1
 8001226:	6822      	ldr	r2, [r4, #0]
 8001228:	401a      	ands	r2, r3
 800122a:	42b2      	cmp	r2, r6
 800122c:	d851      	bhi.n	80012d2 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	4c30      	ldr	r4, [pc, #192]	; (80012f4 <HAL_RCC_ClockConfig+0xf4>)
 8001232:	075b      	lsls	r3, r3, #29
 8001234:	d454      	bmi.n	80012e0 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001236:	f7ff ffb1 	bl	800119c <HAL_RCC_GetSysClockFreq>
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <HAL_RCC_ClockConfig+0xf8>)
 800123e:	061b      	lsls	r3, r3, #24
 8001240:	0f1b      	lsrs	r3, r3, #28
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	40d8      	lsrs	r0, r3
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_RCC_ClockConfig+0xfc>)
 8001248:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800124a:	2003      	movs	r0, #3
 800124c:	f7ff fbf2 	bl	8000a34 <HAL_InitTick>
  return HAL_OK;
 8001250:	2000      	movs	r0, #0
 8001252:	e7db      	b.n	800120c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	4393      	bics	r3, r2
 8001258:	430b      	orrs	r3, r1
 800125a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	4013      	ands	r3, r2
 8001260:	428b      	cmp	r3, r1
 8001262:	d1d2      	bne.n	800120a <HAL_RCC_ClockConfig+0xa>
 8001264:	e7d9      	b.n	800121a <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <HAL_RCC_ClockConfig+0xf4>)
 8001268:	074b      	lsls	r3, r1, #29
 800126a:	d504      	bpl.n	8001276 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800126c:	23e0      	movs	r3, #224	; 0xe0
 800126e:	6850      	ldr	r0, [r2, #4]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4303      	orrs	r3, r0
 8001274:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001276:	20f0      	movs	r0, #240	; 0xf0
 8001278:	6853      	ldr	r3, [r2, #4]
 800127a:	4383      	bics	r3, r0
 800127c:	68a8      	ldr	r0, [r5, #8]
 800127e:	4303      	orrs	r3, r0
 8001280:	6053      	str	r3, [r2, #4]
 8001282:	e7cd      	b.n	8001220 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001284:	4f1b      	ldr	r7, [pc, #108]	; (80012f4 <HAL_RCC_ClockConfig+0xf4>)
 8001286:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001288:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	2a01      	cmp	r2, #1
 800128c:	d119      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	039b      	lsls	r3, r3, #14
 8001290:	d5bb      	bpl.n	800120a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001292:	2103      	movs	r1, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	438b      	bics	r3, r1
 8001298:	4313      	orrs	r3, r2
 800129a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 800129c:	f7ff fc0a 	bl	8000ab4 <HAL_GetTick>
 80012a0:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	230c      	movs	r3, #12
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	401a      	ands	r2, r3
 80012a8:	686b      	ldr	r3, [r5, #4]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d0b9      	beq.n	8001224 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7ff fc00 	bl	8000ab4 <HAL_GetTick>
 80012b4:	9b01      	ldr	r3, [sp, #4]
 80012b6:	1ac0      	subs	r0, r0, r3
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_RCC_ClockConfig+0x100>)
 80012ba:	4298      	cmp	r0, r3
 80012bc:	d9f1      	bls.n	80012a2 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80012be:	2003      	movs	r0, #3
 80012c0:	e7a4      	b.n	800120c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	2a02      	cmp	r2, #2
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	019b      	lsls	r3, r3, #6
 80012c8:	d4e3      	bmi.n	8001292 <HAL_RCC_ClockConfig+0x92>
 80012ca:	e79e      	b.n	800120a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	079b      	lsls	r3, r3, #30
 80012ce:	d4e0      	bmi.n	8001292 <HAL_RCC_ClockConfig+0x92>
 80012d0:	e79b      	b.n	800120a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	6822      	ldr	r2, [r4, #0]
 80012d4:	439a      	bics	r2, r3
 80012d6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d8:	6822      	ldr	r2, [r4, #0]
 80012da:	421a      	tst	r2, r3
 80012dc:	d0a7      	beq.n	800122e <HAL_RCC_ClockConfig+0x2e>
 80012de:	e794      	b.n	800120a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80012e0:	6863      	ldr	r3, [r4, #4]
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_RCC_ClockConfig+0x104>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	68ea      	ldr	r2, [r5, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	6063      	str	r3, [r4, #4]
 80012ec:	e7a3      	b.n	8001236 <HAL_RCC_ClockConfig+0x36>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	08002800 	.word	0x08002800
 80012fc:	20000008 	.word	0x20000008
 8001300:	00001388 	.word	0x00001388
 8001304:	fffff8ff 	.word	0xfffff8ff

08001308 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <HAL_RCC_GetPCLK1Freq+0x14>)
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <HAL_RCC_GetPCLK1Freq+0x18>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	055b      	lsls	r3, r3, #21
 8001310:	0f5b      	lsrs	r3, r3, #29
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	40d8      	lsrs	r0, r3
}    
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	08002810 	.word	0x08002810
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800132a:	6803      	ldr	r3, [r0, #0]
{
 800132c:	0005      	movs	r5, r0
 800132e:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001330:	03db      	lsls	r3, r3, #15
 8001332:	d52a      	bpl.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001334:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001336:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001338:	4c38      	ldr	r4, [pc, #224]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800133a:	0552      	lsls	r2, r2, #21
 800133c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800133e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001340:	4213      	tst	r3, r2
 8001342:	d108      	bne.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	69e3      	ldr	r3, [r4, #28]
 8001346:	4313      	orrs	r3, r2
 8001348:	61e3      	str	r3, [r4, #28]
 800134a:	69e3      	ldr	r3, [r4, #28]
 800134c:	4013      	ands	r3, r2
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	2780      	movs	r7, #128	; 0x80
 8001358:	4e31      	ldr	r6, [pc, #196]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800135a:	007f      	lsls	r7, r7, #1
 800135c:	6833      	ldr	r3, [r6, #0]
 800135e:	423b      	tst	r3, r7
 8001360:	d028      	beq.n	80013b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001362:	6a22      	ldr	r2, [r4, #32]
 8001364:	23c0      	movs	r3, #192	; 0xc0
 8001366:	0011      	movs	r1, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4e2e      	ldr	r6, [pc, #184]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800136c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800136e:	421a      	tst	r2, r3
 8001370:	d132      	bne.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001372:	6a23      	ldr	r3, [r4, #32]
 8001374:	401e      	ands	r6, r3
 8001376:	686b      	ldr	r3, [r5, #4]
 8001378:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800137a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800137c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800137e:	2b01      	cmp	r3, #1
 8001380:	d103      	bne.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001382:	69e3      	ldr	r3, [r4, #28]
 8001384:	4a28      	ldr	r2, [pc, #160]	; (8001428 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001386:	4013      	ands	r3, r2
 8001388:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800138a:	682a      	ldr	r2, [r5, #0]
 800138c:	07d3      	lsls	r3, r2, #31
 800138e:	d506      	bpl.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001390:	2003      	movs	r0, #3
 8001392:	4922      	ldr	r1, [pc, #136]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8001394:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001396:	4383      	bics	r3, r0
 8001398:	68a8      	ldr	r0, [r5, #8]
 800139a:	4303      	orrs	r3, r0
 800139c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800139e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013a0:	0693      	lsls	r3, r2, #26
 80013a2:	d517      	bpl.n	80013d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013a4:	2110      	movs	r1, #16
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80013a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013aa:	438b      	bics	r3, r1
 80013ac:	68e9      	ldr	r1, [r5, #12]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	e00f      	b.n	80013d4 <HAL_RCCEx_PeriphCLKConfig+0xac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b4:	6833      	ldr	r3, [r6, #0]
 80013b6:	433b      	orrs	r3, r7
 80013b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013ba:	f7ff fb7b 	bl	8000ab4 <HAL_GetTick>
 80013be:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	6833      	ldr	r3, [r6, #0]
 80013c2:	423b      	tst	r3, r7
 80013c4:	d1cd      	bne.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fb75 	bl	8000ab4 <HAL_GetTick>
 80013ca:	9b01      	ldr	r3, [sp, #4]
 80013cc:	1ac0      	subs	r0, r0, r3
 80013ce:	2864      	cmp	r0, #100	; 0x64
 80013d0:	d9f6      	bls.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
          return HAL_TIMEOUT;
 80013d2:	2003      	movs	r0, #3
}
 80013d4:	b005      	add	sp, #20
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013d8:	686a      	ldr	r2, [r5, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	428b      	cmp	r3, r1
 80013de:	d0c8      	beq.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80013e0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013e2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80013e4:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013e6:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80013e8:	025b      	lsls	r3, r3, #9
 80013ea:	4303      	orrs	r3, r0
 80013ec:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013ee:	6a23      	ldr	r3, [r4, #32]
 80013f0:	480e      	ldr	r0, [pc, #56]	; (800142c <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013f2:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013f4:	4003      	ands	r3, r0
 80013f6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80013f8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80013fa:	07d3      	lsls	r3, r2, #31
 80013fc:	d5b9      	bpl.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb59 	bl	8000ab4 <HAL_GetTick>
 8001402:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	2202      	movs	r2, #2
 8001406:	6a23      	ldr	r3, [r4, #32]
 8001408:	4213      	tst	r3, r2
 800140a:	d1b2      	bne.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff fb52 	bl	8000ab4 <HAL_GetTick>
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001412:	1bc0      	subs	r0, r0, r7
 8001414:	4298      	cmp	r0, r3
 8001416:	d9f5      	bls.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8001418:	e7db      	b.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	40021000 	.word	0x40021000
 8001420:	40007000 	.word	0x40007000
 8001424:	fffffcff 	.word	0xfffffcff
 8001428:	efffffff 	.word	0xefffffff
 800142c:	fffeffff 	.word	0xfffeffff
 8001430:	00001388 	.word	0x00001388

08001434 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	000e      	movs	r6, r1
 8001438:	b085      	sub	sp, #20
 800143a:	0015      	movs	r5, r2
 800143c:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800143e:	f7ff fb39 	bl	8000ab4 <HAL_GetTick>
 8001442:	19ad      	adds	r5, r5, r6
 8001444:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001446:	f7ff fb35 	bl	8000ab4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800144a:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 800144e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	0d1b      	lsrs	r3, r3, #20
 8001456:	436b      	muls	r3, r5
 8001458:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	6893      	ldr	r3, [r2, #8]
 800145e:	0018      	movs	r0, r3
 8001460:	4038      	ands	r0, r7
 8001462:	423b      	tst	r3, r7
 8001464:	d032      	beq.n	80014cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001466:	1c73      	adds	r3, r6, #1
 8001468:	d0f8      	beq.n	800145c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800146a:	f7ff fb23 	bl	8000ab4 <HAL_GetTick>
 800146e:	9b01      	ldr	r3, [sp, #4]
 8001470:	1ac0      	subs	r0, r0, r3
 8001472:	42a8      	cmp	r0, r5
 8001474:	d32c      	bcc.n	80014d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001476:	21e0      	movs	r1, #224	; 0xe0
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	438a      	bics	r2, r1
 800147e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001480:	2282      	movs	r2, #130	; 0x82
 8001482:	6861      	ldr	r1, [r4, #4]
 8001484:	0052      	lsls	r2, r2, #1
 8001486:	4291      	cmp	r1, r2
 8001488:	d10c      	bne.n	80014a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	68a2      	ldr	r2, [r4, #8]
 800148e:	0209      	lsls	r1, r1, #8
 8001490:	428a      	cmp	r2, r1
 8001492:	d003      	beq.n	800149c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	00c9      	lsls	r1, r1, #3
 8001498:	428a      	cmp	r2, r1
 800149a:	d103      	bne.n	80014a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	438a      	bics	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014a8:	0189      	lsls	r1, r1, #6
 80014aa:	428a      	cmp	r2, r1
 80014ac:	d106      	bne.n	80014bc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80014b2:	4001      	ands	r1, r0
 80014b4:	6019      	str	r1, [r3, #0]
 80014b6:	6819      	ldr	r1, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80014bc:	0023      	movs	r3, r4
 80014be:	2201      	movs	r2, #1
 80014c0:	335d      	adds	r3, #93	; 0x5d
 80014c2:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80014c4:	2300      	movs	r3, #0
 80014c6:	2003      	movs	r0, #3
 80014c8:	345c      	adds	r4, #92	; 0x5c
 80014ca:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 80014cc:	b005      	add	sp, #20
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80014d0:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80014d2:	1e5a      	subs	r2, r3, #1
 80014d4:	4193      	sbcs	r3, r2
 80014d6:	425b      	negs	r3, r3
 80014d8:	401d      	ands	r5, r3
      count--;
 80014da:	9b03      	ldr	r3, [sp, #12]
 80014dc:	3b01      	subs	r3, #1
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	e7bb      	b.n	800145a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	20000008 	.word	0x20000008
 80014e8:	ffffdfff 	.word	0xffffdfff

080014ec <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80014f0:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80014f2:	b085      	sub	sp, #20
 80014f4:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 80014f6:	ab02      	add	r3, sp, #8
 80014f8:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80014fa:	0004      	movs	r4, r0
 80014fc:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80014fe:	f7ff fad9 	bl	8000ab4 <HAL_GetTick>
 8001502:	19ed      	adds	r5, r5, r7
 8001504:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001506:	f7ff fad5 	bl	8000ab4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800150a:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800150c:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 800150e:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001510:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4353      	muls	r3, r2
 8001518:	0d1b      	lsrs	r3, r3, #20
 800151a:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 800151c:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 800151e:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8001520:	ab02      	add	r3, sp, #8
 8001522:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001524:	688b      	ldr	r3, [r1, #8]
 8001526:	0018      	movs	r0, r3
 8001528:	4030      	ands	r0, r6
 800152a:	4233      	tst	r3, r6
 800152c:	d03b      	beq.n	80015a6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	429e      	cmp	r6, r3
 8001534:	d104      	bne.n	8001540 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8001536:	9b01      	ldr	r3, [sp, #4]
 8001538:	7b1b      	ldrb	r3, [r3, #12]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 800153e:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8001540:	1c7b      	adds	r3, r7, #1
 8001542:	d0ef      	beq.n	8001524 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001544:	f7ff fab6 	bl	8000ab4 <HAL_GetTick>
 8001548:	9b00      	ldr	r3, [sp, #0]
 800154a:	1ac0      	subs	r0, r0, r3
 800154c:	42a8      	cmp	r0, r5
 800154e:	d32c      	bcc.n	80015aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001550:	21e0      	movs	r1, #224	; 0xe0
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	438a      	bics	r2, r1
 8001558:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800155a:	2282      	movs	r2, #130	; 0x82
 800155c:	6861      	ldr	r1, [r4, #4]
 800155e:	0052      	lsls	r2, r2, #1
 8001560:	4291      	cmp	r1, r2
 8001562:	d10c      	bne.n	800157e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	68a2      	ldr	r2, [r4, #8]
 8001568:	0209      	lsls	r1, r1, #8
 800156a:	428a      	cmp	r2, r1
 800156c:	d003      	beq.n	8001576 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	00c9      	lsls	r1, r1, #3
 8001572:	428a      	cmp	r2, r1
 8001574:	d103      	bne.n	800157e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	438a      	bics	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001582:	0189      	lsls	r1, r1, #6
 8001584:	428a      	cmp	r2, r1
 8001586:	d106      	bne.n	8001596 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 800158c:	4001      	ands	r1, r0
 800158e:	6019      	str	r1, [r3, #0]
 8001590:	6819      	ldr	r1, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001596:	0023      	movs	r3, r4
 8001598:	2201      	movs	r2, #1
 800159a:	335d      	adds	r3, #93	; 0x5d
 800159c:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800159e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80015a0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80015a2:	345c      	adds	r4, #92	; 0x5c
 80015a4:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 80015a6:	b005      	add	sp, #20
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80015aa:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	4193      	sbcs	r3, r2
 80015b0:	425b      	negs	r3, r3
 80015b2:	401d      	ands	r5, r3
      count--;
 80015b4:	9b03      	ldr	r3, [sp, #12]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	e7b0      	b.n	800151c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	20000008 	.word	0x20000008
 80015c0:	ffffdfff 	.word	0xffffdfff

080015c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015c6:	2382      	movs	r3, #130	; 0x82
{
 80015c8:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015ca:	6842      	ldr	r2, [r0, #4]
{
 80015cc:	0004      	movs	r4, r0
 80015ce:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d10d      	bne.n	80015f2 <SPI_EndRxTransaction+0x2e>
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	6883      	ldr	r3, [r0, #8]
 80015da:	0212      	lsls	r2, r2, #8
 80015dc:	4293      	cmp	r3, r2
 80015de:	d003      	beq.n	80015e8 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	00d2      	lsls	r2, r2, #3
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d104      	bne.n	80015f2 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	6813      	ldr	r3, [r2, #0]
 80015ee:	438b      	bics	r3, r1
 80015f0:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80015f2:	003a      	movs	r2, r7
 80015f4:	0031      	movs	r1, r6
 80015f6:	0020      	movs	r0, r4
 80015f8:	f7ff ff1c 	bl	8001434 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80015fc:	1e05      	subs	r5, r0, #0
 80015fe:	d005      	beq.n	800160c <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001600:	2320      	movs	r3, #32
 8001602:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001604:	2503      	movs	r5, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001606:	4313      	orrs	r3, r2
 8001608:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800160a:	e016      	b.n	800163a <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800160c:	2382      	movs	r3, #130	; 0x82
 800160e:	6862      	ldr	r2, [r4, #4]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	429a      	cmp	r2, r3
 8001614:	d111      	bne.n	800163a <SPI_EndRxTransaction+0x76>
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	68a3      	ldr	r3, [r4, #8]
 800161a:	0212      	lsls	r2, r2, #8
 800161c:	4293      	cmp	r3, r2
 800161e:	d003      	beq.n	8001628 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	00d2      	lsls	r2, r2, #3
 8001624:	4293      	cmp	r3, r2
 8001626:	d108      	bne.n	800163a <SPI_EndRxTransaction+0x76>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001628:	21c0      	movs	r1, #192	; 0xc0
 800162a:	003b      	movs	r3, r7
 800162c:	0032      	movs	r2, r6
 800162e:	0020      	movs	r0, r4
 8001630:	00c9      	lsls	r1, r1, #3
 8001632:	f7ff ff5b 	bl	80014ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001636:	2800      	cmp	r0, #0
 8001638:	d1e2      	bne.n	8001600 <SPI_EndRxTransaction+0x3c>
}
 800163a:	0028      	movs	r0, r5
 800163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800163e <SPI_EndRxTxTransaction>:
{
 800163e:	b570      	push	{r4, r5, r6, lr}
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001640:	0013      	movs	r3, r2
{
 8001642:	000d      	movs	r5, r1
 8001644:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001646:	000a      	movs	r2, r1
 8001648:	21c0      	movs	r1, #192	; 0xc0
 800164a:	0149      	lsls	r1, r1, #5
{
 800164c:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800164e:	f7ff ff4d 	bl	80014ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001652:	2800      	cmp	r0, #0
 8001654:	d005      	beq.n	8001662 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001656:	2320      	movs	r3, #32
 8001658:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800165a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800165c:	4313      	orrs	r3, r2
 800165e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001660:	e00f      	b.n	8001682 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001662:	0032      	movs	r2, r6
 8001664:	0029      	movs	r1, r5
 8001666:	0020      	movs	r0, r4
 8001668:	f7ff fee4 	bl	8001434 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800166c:	2800      	cmp	r0, #0
 800166e:	d1f2      	bne.n	8001656 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001670:	21c0      	movs	r1, #192	; 0xc0
 8001672:	0033      	movs	r3, r6
 8001674:	002a      	movs	r2, r5
 8001676:	0020      	movs	r0, r4
 8001678:	00c9      	lsls	r1, r1, #3
 800167a:	f7ff ff37 	bl	80014ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800167e:	2800      	cmp	r0, #0
 8001680:	d1e9      	bne.n	8001656 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8001682:	bd70      	pop	{r4, r5, r6, pc}

08001684 <HAL_SPI_Init>:
{
 8001684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001686:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
  if (hspi == NULL)
 800168a:	2c00      	cmp	r4, #0
 800168c:	d067      	beq.n	800175e <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800168e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001690:	2b00      	cmp	r3, #0
 8001692:	d165      	bne.n	8001760 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001694:	2282      	movs	r2, #130	; 0x82
 8001696:	6861      	ldr	r1, [r4, #4]
 8001698:	0052      	lsls	r2, r2, #1
 800169a:	4291      	cmp	r1, r2
 800169c:	d000      	beq.n	80016a0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800169e:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80016a2:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80016a6:	355d      	adds	r5, #93	; 0x5d
 80016a8:	782b      	ldrb	r3, [r5, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80016b0:	0023      	movs	r3, r4
 80016b2:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 80016b4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80016b6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80016b8:	f7ff f8ea 	bl	8000890 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80016bc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80016be:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80016c0:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80016c2:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016c4:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016ca:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 80016cc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016ce:	00c9      	lsls	r1, r1, #3
 80016d0:	2300      	movs	r3, #0
 80016d2:	428d      	cmp	r5, r1
 80016d4:	d848      	bhi.n	8001768 <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80016d6:	2080      	movs	r0, #128	; 0x80
 80016d8:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80016da:	428d      	cmp	r5, r1
 80016dc:	d000      	beq.n	80016e0 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016de:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016e0:	2382      	movs	r3, #130	; 0x82
 80016e2:	6866      	ldr	r6, [r4, #4]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4033      	ands	r3, r6
 80016e8:	2684      	movs	r6, #132	; 0x84
 80016ea:	68a7      	ldr	r7, [r4, #8]
 80016ec:	0236      	lsls	r6, r6, #8
 80016ee:	403e      	ands	r6, r7
 80016f0:	4333      	orrs	r3, r6
 80016f2:	2602      	movs	r6, #2
 80016f4:	6927      	ldr	r7, [r4, #16]
 80016f6:	69a1      	ldr	r1, [r4, #24]
 80016f8:	403e      	ands	r6, r7
 80016fa:	4333      	orrs	r3, r6
 80016fc:	2601      	movs	r6, #1
 80016fe:	6967      	ldr	r7, [r4, #20]
 8001700:	46b4      	mov	ip, r6
 8001702:	4037      	ands	r7, r6
 8001704:	433b      	orrs	r3, r7
 8001706:	2780      	movs	r7, #128	; 0x80
 8001708:	00bf      	lsls	r7, r7, #2
 800170a:	400f      	ands	r7, r1
 800170c:	433b      	orrs	r3, r7
 800170e:	2738      	movs	r7, #56	; 0x38
 8001710:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001712:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001714:	4037      	ands	r7, r6
 8001716:	433b      	orrs	r3, r7
 8001718:	2780      	movs	r7, #128	; 0x80
 800171a:	6a26      	ldr	r6, [r4, #32]
 800171c:	4037      	ands	r7, r6
 800171e:	433b      	orrs	r3, r7
 8001720:	2780      	movs	r7, #128	; 0x80
 8001722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001724:	01bf      	lsls	r7, r7, #6
 8001726:	4037      	ands	r7, r6
 8001728:	433b      	orrs	r3, r7
 800172a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800172c:	2310      	movs	r3, #16
 800172e:	2708      	movs	r7, #8
 8001730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001732:	4033      	ands	r3, r6
 8001734:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001736:	4037      	ands	r7, r6
 8001738:	433b      	orrs	r3, r7
 800173a:	27f0      	movs	r7, #240	; 0xf0
 800173c:	013f      	lsls	r7, r7, #4
 800173e:	403d      	ands	r5, r7
 8001740:	431d      	orrs	r5, r3
 8001742:	2304      	movs	r3, #4
 8001744:	4019      	ands	r1, r3
 8001746:	4329      	orrs	r1, r5
 8001748:	4308      	orrs	r0, r1
 800174a:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800174c:	69d3      	ldr	r3, [r2, #28]
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001750:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001752:	400b      	ands	r3, r1
 8001754:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001756:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001758:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800175a:	345d      	adds	r4, #93	; 0x5d
 800175c:	7023      	strb	r3, [r4, #0]
}
 800175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001764:	6163      	str	r3, [r4, #20]
 8001766:	e79b      	b.n	80016a0 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001768:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800176a:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800176c:	0109      	lsls	r1, r1, #4
 800176e:	e7b4      	b.n	80016da <HAL_SPI_Init+0x56>
 8001770:	fffff7ff 	.word	0xfffff7ff

08001774 <HAL_SPI_TransmitReceive>:
{
 8001774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001776:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001778:	0003      	movs	r3, r0
 800177a:	335c      	adds	r3, #92	; 0x5c
{
 800177c:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800177e:	781a      	ldrb	r2, [r3, #0]
{
 8001780:	0004      	movs	r4, r0
 8001782:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001784:	2002      	movs	r0, #2
 8001786:	2a01      	cmp	r2, #1
 8001788:	d100      	bne.n	800178c <HAL_SPI_TransmitReceive+0x18>
 800178a:	e0aa      	b.n	80018e2 <HAL_SPI_TransmitReceive+0x16e>
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001790:	f7ff f990 	bl	8000ab4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001794:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001796:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8001798:	335d      	adds	r3, #93	; 0x5d
 800179a:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800179c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800179e:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d00c      	beq.n	80017be <HAL_SPI_TransmitReceive+0x4a>
 80017a4:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 80017a6:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4299      	cmp	r1, r3
 80017ac:	d000      	beq.n	80017b0 <HAL_SPI_TransmitReceive+0x3c>
 80017ae:	e091      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80017b0:	68a3      	ldr	r3, [r4, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d000      	beq.n	80017b8 <HAL_SPI_TransmitReceive+0x44>
 80017b6:	e08d      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
 80017b8:	2a04      	cmp	r2, #4
 80017ba:	d000      	beq.n	80017be <HAL_SPI_TransmitReceive+0x4a>
 80017bc:	e08a      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
    errorcode = HAL_ERROR;
 80017be:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017c0:	2d00      	cmp	r5, #0
 80017c2:	d100      	bne.n	80017c6 <HAL_SPI_TransmitReceive+0x52>
 80017c4:	e086      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
 80017c6:	2f00      	cmp	r7, #0
 80017c8:	d100      	bne.n	80017cc <HAL_SPI_TransmitReceive+0x58>
 80017ca:	e083      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
 80017cc:	2e00      	cmp	r6, #0
 80017ce:	d100      	bne.n	80017d2 <HAL_SPI_TransmitReceive+0x5e>
 80017d0:	e080      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017d2:	0023      	movs	r3, r4
 80017d4:	335d      	adds	r3, #93	; 0x5d
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	2a04      	cmp	r2, #4
 80017da:	d001      	beq.n	80017e0 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017dc:	2205      	movs	r2, #5
 80017de:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 80017e0:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 80017e4:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017e6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017e8:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80017ea:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80017ec:	1da2      	adds	r2, r4, #6
 80017ee:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017f0:	22e0      	movs	r2, #224	; 0xe0
 80017f2:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80017f4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80017f6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017f8:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80017fe:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	4290      	cmp	r0, r2
 8001804:	d930      	bls.n	8001868 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4f5c      	ldr	r7, [pc, #368]	; (800197c <HAL_SPI_TransmitReceive+0x208>)
 800180a:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800180c:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	681f      	ldr	r7, [r3, #0]
 8001812:	4217      	tst	r7, r2
 8001814:	d102      	bne.n	800181c <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8001816:	681f      	ldr	r7, [r3, #0]
 8001818:	433a      	orrs	r2, r7
 800181a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800181c:	22e0      	movs	r2, #224	; 0xe0
 800181e:	00d2      	lsls	r2, r2, #3
 8001820:	4290      	cmp	r0, r2
 8001822:	d95f      	bls.n	80018e4 <HAL_SPI_TransmitReceive+0x170>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001824:	2900      	cmp	r1, #0
 8001826:	d001      	beq.n	800182c <HAL_SPI_TransmitReceive+0xb8>
 8001828:	2e01      	cmp	r6, #1
 800182a:	d107      	bne.n	800183c <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800182c:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800182e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001830:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001832:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001834:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001836:	3b01      	subs	r3, #1
 8001838:	b29b      	uxth	r3, r3
 800183a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800183c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800183e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001840:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001842:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001844:	2b00      	cmp	r3, #0
 8001846:	d114      	bne.n	8001872 <HAL_SPI_TransmitReceive+0xfe>
 8001848:	0023      	movs	r3, r4
 800184a:	3308      	adds	r3, #8
 800184c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_SPI_TransmitReceive+0xfe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001852:	0020      	movs	r0, r4
 8001854:	9a01      	ldr	r2, [sp, #4]
 8001856:	9908      	ldr	r1, [sp, #32]
 8001858:	f7ff fef1 	bl	800163e <SPI_EndRxTxTransaction>
 800185c:	2800      	cmp	r0, #0
 800185e:	d039      	beq.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001860:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001862:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001864:	6623      	str	r3, [r4, #96]	; 0x60
 8001866:	e035      	b.n	80018d4 <HAL_SPI_TransmitReceive+0x160>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	685f      	ldr	r7, [r3, #4]
 800186c:	0152      	lsls	r2, r2, #5
 800186e:	433a      	orrs	r2, r7
 8001870:	e7cc      	b.n	800180c <HAL_SPI_TransmitReceive+0x98>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001872:	6820      	ldr	r0, [r4, #0]
 8001874:	6883      	ldr	r3, [r0, #8]
 8001876:	423b      	tst	r3, r7
 8001878:	d00e      	beq.n	8001898 <HAL_SPI_TransmitReceive+0x124>
 800187a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_SPI_TransmitReceive+0x124>
 8001880:	2d01      	cmp	r5, #1
 8001882:	d109      	bne.n	8001898 <HAL_SPI_TransmitReceive+0x124>
        txallowed = 0U;
 8001884:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001888:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800188a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800188c:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800188e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001890:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001892:	3b01      	subs	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001898:	6883      	ldr	r3, [r0, #8]
 800189a:	0019      	movs	r1, r3
 800189c:	4031      	ands	r1, r6
 800189e:	4233      	tst	r3, r6
 80018a0:	d00e      	beq.n	80018c0 <HAL_SPI_TransmitReceive+0x14c>
 80018a2:	0022      	movs	r2, r4
 80018a4:	3208      	adds	r2, #8
 80018a6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <HAL_SPI_TransmitReceive+0x14c>
        txallowed = 1U;
 80018ac:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018ae:	68c0      	ldr	r0, [r0, #12]
 80018b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018b2:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018b4:	3302      	adds	r3, #2
 80018b6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80018b8:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80018c0:	f7ff f8f8 	bl	8000ab4 <HAL_GetTick>
 80018c4:	9b01      	ldr	r3, [sp, #4]
 80018c6:	1ac0      	subs	r0, r0, r3
 80018c8:	9b08      	ldr	r3, [sp, #32]
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d3b9      	bcc.n	8001842 <HAL_SPI_TransmitReceive+0xce>
 80018ce:	3301      	adds	r3, #1
 80018d0:	d0b7      	beq.n	8001842 <HAL_SPI_TransmitReceive+0xce>
        errorcode = HAL_TIMEOUT;
 80018d2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80018d4:	0023      	movs	r3, r4
 80018d6:	2201      	movs	r2, #1
 80018d8:	335d      	adds	r3, #93	; 0x5d
 80018da:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80018dc:	2300      	movs	r3, #0
 80018de:	345c      	adds	r4, #92	; 0x5c
 80018e0:	7023      	strb	r3, [r4, #0]
}
 80018e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018e4:	2900      	cmp	r1, #0
 80018e6:	d001      	beq.n	80018ec <HAL_SPI_TransmitReceive+0x178>
 80018e8:	2e01      	cmp	r6, #1
 80018ea:	d108      	bne.n	80018fe <HAL_SPI_TransmitReceive+0x18a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018ec:	782a      	ldrb	r2, [r5, #0]
 80018ee:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018f2:	3301      	adds	r3, #1
 80018f4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80018f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80018fe:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001900:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001902:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001904:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001906:	2b00      	cmp	r3, #0
 8001908:	d104      	bne.n	8001914 <HAL_SPI_TransmitReceive+0x1a0>
 800190a:	0023      	movs	r3, r4
 800190c:	3308      	adds	r3, #8
 800190e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001910:	2b00      	cmp	r3, #0
 8001912:	d09e      	beq.n	8001852 <HAL_SPI_TransmitReceive+0xde>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	423a      	tst	r2, r7
 800191a:	d00f      	beq.n	800193c <HAL_SPI_TransmitReceive+0x1c8>
 800191c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800191e:	2a00      	cmp	r2, #0
 8001920:	d00c      	beq.n	800193c <HAL_SPI_TransmitReceive+0x1c8>
 8001922:	2d01      	cmp	r5, #1
 8001924:	d10a      	bne.n	800193c <HAL_SPI_TransmitReceive+0x1c8>
        txallowed = 0U;
 8001926:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001928:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800192a:	7812      	ldrb	r2, [r2, #0]
 800192c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800192e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001930:	3301      	adds	r3, #1
 8001932:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001934:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001936:	3b01      	subs	r3, #1
 8001938:	b29b      	uxth	r3, r3
 800193a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	0011      	movs	r1, r2
 8001942:	4031      	ands	r1, r6
 8001944:	4232      	tst	r2, r6
 8001946:	d00f      	beq.n	8001968 <HAL_SPI_TransmitReceive+0x1f4>
 8001948:	0022      	movs	r2, r4
 800194a:	3208      	adds	r2, #8
 800194c:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 800194e:	2800      	cmp	r0, #0
 8001950:	d00a      	beq.n	8001968 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8001952:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001954:	7b1b      	ldrb	r3, [r3, #12]
 8001956:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001958:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 800195a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800195c:	3301      	adds	r3, #1
 800195e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001960:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001962:	3b01      	subs	r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001968:	f7ff f8a4 	bl	8000ab4 <HAL_GetTick>
 800196c:	9b01      	ldr	r3, [sp, #4]
 800196e:	1ac0      	subs	r0, r0, r3
 8001970:	9b08      	ldr	r3, [sp, #32]
 8001972:	4298      	cmp	r0, r3
 8001974:	d3c6      	bcc.n	8001904 <HAL_SPI_TransmitReceive+0x190>
 8001976:	3301      	adds	r3, #1
 8001978:	d0c4      	beq.n	8001904 <HAL_SPI_TransmitReceive+0x190>
 800197a:	e7aa      	b.n	80018d2 <HAL_SPI_TransmitReceive+0x15e>
 800197c:	ffffefff 	.word	0xffffefff

08001980 <HAL_SPI_Receive>:
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001984:	2382      	movs	r3, #130	; 0x82
{
 8001986:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001988:	6842      	ldr	r2, [r0, #4]
{
 800198a:	0004      	movs	r4, r0
 800198c:	000f      	movs	r7, r1
 800198e:	b087      	sub	sp, #28
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	429a      	cmp	r2, r3
 8001994:	d10d      	bne.n	80019b2 <HAL_SPI_Receive+0x32>
 8001996:	6883      	ldr	r3, [r0, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800199c:	0003      	movs	r3, r0
 800199e:	2204      	movs	r2, #4
 80019a0:	335d      	adds	r3, #93	; 0x5d
 80019a2:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019a4:	0033      	movs	r3, r6
 80019a6:	000a      	movs	r2, r1
 80019a8:	9500      	str	r5, [sp, #0]
 80019aa:	f7ff fee3 	bl	8001774 <HAL_SPI_TransmitReceive>
}
 80019ae:	b007      	add	sp, #28
 80019b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80019b2:	0023      	movs	r3, r4
 80019b4:	335c      	adds	r3, #92	; 0x5c
 80019b6:	9304      	str	r3, [sp, #16]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2002      	movs	r0, #2
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d0f6      	beq.n	80019ae <HAL_SPI_Receive+0x2e>
 80019c0:	2301      	movs	r3, #1
 80019c2:	9a04      	ldr	r2, [sp, #16]
 80019c4:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80019c6:	f7ff f875 	bl	8000ab4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80019ca:	0023      	movs	r3, r4
 80019cc:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 80019ce:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80019d0:	9305      	str	r3, [sp, #20]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2d8      	uxtb	r0, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d000      	beq.n	80019dc <HAL_SPI_Receive+0x5c>
 80019da:	e087      	b.n	8001aec <HAL_SPI_Receive+0x16c>
  if ((pData == NULL) || (Size == 0U))
 80019dc:	2f00      	cmp	r7, #0
 80019de:	d061      	beq.n	8001aa4 <HAL_SPI_Receive+0x124>
 80019e0:	2e00      	cmp	r6, #0
 80019e2:	d05f      	beq.n	8001aa4 <HAL_SPI_Receive+0x124>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019e4:	9a05      	ldr	r2, [sp, #20]
 80019e6:	3303      	adds	r3, #3
 80019e8:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019ea:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 80019ec:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019ee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019f0:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80019f2:	3202      	adds	r2, #2
  hspi->RxXferSize  = Size;
 80019f4:	8796      	strh	r6, [r2, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80019f6:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019f8:	22e0      	movs	r2, #224	; 0xe0
 80019fa:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80019fc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80019fe:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001a00:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001a02:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001a04:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a06:	00d2      	lsls	r2, r2, #3
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	4291      	cmp	r1, r2
 8001a0c:	d92d      	bls.n	8001a6a <HAL_SPI_Receive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4837      	ldr	r0, [pc, #220]	; (8001af0 <HAL_SPI_Receive+0x170>)
 8001a12:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a14:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	68a0      	ldr	r0, [r4, #8]
 8001a1a:	0212      	lsls	r2, r2, #8
 8001a1c:	4290      	cmp	r0, r2
 8001a1e:	d107      	bne.n	8001a30 <HAL_SPI_Receive+0xb0>
    __HAL_SPI_DISABLE(hspi);
 8001a20:	2040      	movs	r0, #64	; 0x40
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4382      	bics	r2, r0
 8001a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4832      	ldr	r0, [pc, #200]	; (8001af4 <HAL_SPI_Receive+0x174>)
 8001a2c:	4002      	ands	r2, r0
 8001a2e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	4210      	tst	r0, r2
 8001a36:	d102      	bne.n	8001a3e <HAL_SPI_Receive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001a3e:	23e0      	movs	r3, #224	; 0xe0
 8001a40:	0026      	movs	r6, r4
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a42:	2701      	movs	r7, #1
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	3608      	adds	r6, #8
 8001a48:	4299      	cmp	r1, r3
 8001a4a:	d83f      	bhi.n	8001acc <HAL_SPI_Receive+0x14c>
    while (hspi->RxXferCount > 0U)
 8001a4c:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d110      	bne.n	8001a74 <HAL_SPI_Receive+0xf4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a52:	0029      	movs	r1, r5
 8001a54:	0020      	movs	r0, r4
 8001a56:	9a03      	ldr	r2, [sp, #12]
 8001a58:	f7ff fdb4 	bl	80015c4 <SPI_EndRxTransaction>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d142      	bne.n	8001ae6 <HAL_SPI_Receive+0x166>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a60:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a62:	1e43      	subs	r3, r0, #1
 8001a64:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8001a66:	b2c0      	uxtb	r0, r0
error :
 8001a68:	e01c      	b.n	8001aa4 <HAL_SPI_Receive+0x124>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	6858      	ldr	r0, [r3, #4]
 8001a6e:	0152      	lsls	r2, r2, #5
 8001a70:	4302      	orrs	r2, r0
 8001a72:	e7cf      	b.n	8001a14 <HAL_SPI_Receive+0x94>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	423a      	tst	r2, r7
 8001a7a:	d00a      	beq.n	8001a92 <HAL_SPI_Receive+0x112>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a7c:	7b1b      	ldrb	r3, [r3, #12]
 8001a7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a80:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a84:	3301      	adds	r3, #1
 8001a86:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001a88:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	87f3      	strh	r3, [r6, #62]	; 0x3e
 8001a90:	e7dc      	b.n	8001a4c <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a92:	f7ff f80f 	bl	8000ab4 <HAL_GetTick>
 8001a96:	9b03      	ldr	r3, [sp, #12]
 8001a98:	1ac0      	subs	r0, r0, r3
 8001a9a:	42a8      	cmp	r0, r5
 8001a9c:	d3d6      	bcc.n	8001a4c <HAL_SPI_Receive+0xcc>
 8001a9e:	1c6b      	adds	r3, r5, #1
 8001aa0:	d0d4      	beq.n	8001a4c <HAL_SPI_Receive+0xcc>
          errorcode = HAL_TIMEOUT;
 8001aa2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9a05      	ldr	r2, [sp, #20]
 8001aa8:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9a04      	ldr	r2, [sp, #16]
 8001aae:	7013      	strb	r3, [r2, #0]
  return errorcode;
 8001ab0:	e77d      	b.n	80019ae <HAL_SPI_Receive+0x2e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	423a      	tst	r2, r7
 8001ab8:	d00c      	beq.n	8001ad4 <HAL_SPI_Receive+0x154>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001abe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001ac4:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	87f3      	strh	r3, [r6, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001acc:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ef      	bne.n	8001ab2 <HAL_SPI_Receive+0x132>
 8001ad2:	e7be      	b.n	8001a52 <HAL_SPI_Receive+0xd2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ad4:	f7fe ffee 	bl	8000ab4 <HAL_GetTick>
 8001ad8:	9b03      	ldr	r3, [sp, #12]
 8001ada:	1ac0      	subs	r0, r0, r3
 8001adc:	42a8      	cmp	r0, r5
 8001ade:	d3f5      	bcc.n	8001acc <HAL_SPI_Receive+0x14c>
 8001ae0:	1c6b      	adds	r3, r5, #1
 8001ae2:	d0f3      	beq.n	8001acc <HAL_SPI_Receive+0x14c>
 8001ae4:	e7dd      	b.n	8001aa2 <HAL_SPI_Receive+0x122>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	6623      	str	r3, [r4, #96]	; 0x60
 8001aea:	e7b9      	b.n	8001a60 <HAL_SPI_Receive+0xe0>
    errorcode = HAL_BUSY;
 8001aec:	2002      	movs	r0, #2
 8001aee:	e7d9      	b.n	8001aa4 <HAL_SPI_Receive+0x124>
 8001af0:	ffffefff 	.word	0xffffefff
 8001af4:	ffffbfff 	.word	0xffffbfff

08001af8 <HAL_SPI_TransmitReceive_IT>:
{
 8001af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8001afa:	0005      	movs	r5, r0
 8001afc:	355c      	adds	r5, #92	; 0x5c
 8001afe:	782e      	ldrb	r6, [r5, #0]
{
 8001b00:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8001b02:	2002      	movs	r0, #2
 8001b04:	2e01      	cmp	r6, #1
 8001b06:	d048      	beq.n	8001b9a <HAL_SPI_TransmitReceive_IT+0xa2>
  tmp_state           = hspi->State;
 8001b08:	0026      	movs	r6, r4
  __HAL_LOCK(hspi);
 8001b0a:	3801      	subs	r0, #1
 8001b0c:	7028      	strb	r0, [r5, #0]
  tmp_state           = hspi->State;
 8001b0e:	365d      	adds	r6, #93	; 0x5d
 8001b10:	7830      	ldrb	r0, [r6, #0]
 8001b12:	b2c7      	uxtb	r7, r0
 8001b14:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b16:	2801      	cmp	r0, #1
 8001b18:	d00d      	beq.n	8001b36 <HAL_SPI_TransmitReceive_IT+0x3e>
 8001b1a:	2082      	movs	r0, #130	; 0x82
 8001b1c:	0040      	lsls	r0, r0, #1
 8001b1e:	4684      	mov	ip, r0
 8001b20:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 8001b22:	3803      	subs	r0, #3
 8001b24:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b26:	4567      	cmp	r7, ip
 8001b28:	d135      	bne.n	8001b96 <HAL_SPI_TransmitReceive_IT+0x9e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b2a:	68a7      	ldr	r7, [r4, #8]
 8001b2c:	2f00      	cmp	r7, #0
 8001b2e:	d132      	bne.n	8001b96 <HAL_SPI_TransmitReceive_IT+0x9e>
 8001b30:	9f01      	ldr	r7, [sp, #4]
 8001b32:	2f04      	cmp	r7, #4
 8001b34:	d12f      	bne.n	8001b96 <HAL_SPI_TransmitReceive_IT+0x9e>
    errorcode = HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b38:	2900      	cmp	r1, #0
 8001b3a:	d02c      	beq.n	8001b96 <HAL_SPI_TransmitReceive_IT+0x9e>
 8001b3c:	2a00      	cmp	r2, #0
 8001b3e:	d02a      	beq.n	8001b96 <HAL_SPI_TransmitReceive_IT+0x9e>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d028      	beq.n	8001b96 <HAL_SPI_TransmitReceive_IT+0x9e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b44:	7830      	ldrb	r0, [r6, #0]
 8001b46:	2804      	cmp	r0, #4
 8001b48:	d001      	beq.n	8001b4e <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	7030      	strb	r0, [r6, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b4e:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b50:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b52:	21e0      	movs	r1, #224	; 0xe0
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b54:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b56:	6422      	str	r2, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b58:	68e0      	ldr	r0, [r4, #12]
  hspi->RxXferSize  = Size;
 8001b5a:	1da2      	adds	r2, r4, #6
  hspi->TxXferSize  = Size;
 8001b5c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001b5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 8001b60:	3202      	adds	r2, #2
  hspi->RxXferSize  = Size;
 8001b62:	8793      	strh	r3, [r2, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b64:	00c9      	lsls	r1, r1, #3
  hspi->RxXferCount = Size;
 8001b66:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b68:	6822      	ldr	r2, [r4, #0]
 8001b6a:	4288      	cmp	r0, r1
 8001b6c:	d916      	bls.n	8001b9c <HAL_SPI_TransmitReceive_IT+0xa4>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_SPI_TransmitReceive_IT+0xbc>)
 8001b70:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_SPI_TransmitReceive_IT+0xc0>)
 8001b74:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b76:	6853      	ldr	r3, [r2, #4]
 8001b78:	4910      	ldr	r1, [pc, #64]	; (8001bbc <HAL_SPI_TransmitReceive_IT+0xc4>)
 8001b7a:	400b      	ands	r3, r1
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b7c:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b7e:	23e0      	movs	r3, #224	; 0xe0
 8001b80:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b82:	2000      	movs	r0, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	6811      	ldr	r1, [r2, #0]
 8001b8c:	4219      	tst	r1, r3
 8001b8e:	d102      	bne.n	8001b96 <HAL_SPI_TransmitReceive_IT+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8001b90:	6811      	ldr	r1, [r2, #0]
 8001b92:	430b      	orrs	r3, r1
 8001b94:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8001b96:	2300      	movs	r3, #0
 8001b98:	702b      	strb	r3, [r5, #0]
}
 8001b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001b9c:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <HAL_SPI_TransmitReceive_IT+0xc8>)
 8001b9e:	64e1      	str	r1, [r4, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001ba0:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <HAL_SPI_TransmitReceive_IT+0xcc>)
 8001ba2:	6521      	str	r1, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d8e6      	bhi.n	8001b76 <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	6851      	ldr	r1, [r2, #4]
 8001bac:	015b      	lsls	r3, r3, #5
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	e7e4      	b.n	8001b7c <HAL_SPI_TransmitReceive_IT+0x84>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	08001e6b 	.word	0x08001e6b
 8001bb8:	08001e37 	.word	0x08001e37
 8001bbc:	ffffefff 	.word	0xffffefff
 8001bc0:	08001dd7 	.word	0x08001dd7
 8001bc4:	08001d8b 	.word	0x08001d8b

08001bc8 <HAL_SPI_Receive_IT>:
{
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001bca:	6886      	ldr	r6, [r0, #8]
{
 8001bcc:	0013      	movs	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001bce:	2e00      	cmp	r6, #0
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_SPI_Receive_IT+0x28>
 8001bd2:	2282      	movs	r2, #130	; 0x82
 8001bd4:	6844      	ldr	r4, [r0, #4]
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	4294      	cmp	r4, r2
 8001bda:	d109      	bne.n	8001bf0 <HAL_SPI_Receive_IT+0x28>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bdc:	0002      	movs	r2, r0
 8001bde:	2404      	movs	r4, #4
 8001be0:	325d      	adds	r2, #93	; 0x5d
 8001be2:	7014      	strb	r4, [r2, #0]
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001be4:	000a      	movs	r2, r1
 8001be6:	f7ff ff87 	bl	8001af8 <HAL_SPI_TransmitReceive_IT>
 8001bea:	0004      	movs	r4, r0
}
 8001bec:	0020      	movs	r0, r4
 8001bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001bf0:	0005      	movs	r5, r0
 8001bf2:	355c      	adds	r5, #92	; 0x5c
 8001bf4:	782a      	ldrb	r2, [r5, #0]
 8001bf6:	2402      	movs	r4, #2
 8001bf8:	2a01      	cmp	r2, #1
 8001bfa:	d0f7      	beq.n	8001bec <HAL_SPI_Receive_IT+0x24>
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	702a      	strb	r2, [r5, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c00:	0002      	movs	r2, r0
 8001c02:	325d      	adds	r2, #93	; 0x5d
 8001c04:	7817      	ldrb	r7, [r2, #0]
 8001c06:	b2fc      	uxtb	r4, r7
 8001c08:	2f01      	cmp	r7, #1
 8001c0a:	d13e      	bne.n	8001c8a <HAL_SPI_Receive_IT+0xc2>
  if ((pData == NULL) || (Size == 0U))
 8001c0c:	2900      	cmp	r1, #0
 8001c0e:	d032      	beq.n	8001c76 <HAL_SPI_Receive_IT+0xae>
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d030      	beq.n	8001c76 <HAL_SPI_Receive_IT+0xae>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c14:	2404      	movs	r4, #4
 8001c16:	7014      	strb	r4, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c18:	2200      	movs	r2, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c1a:	6401      	str	r1, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001c1c:	1d81      	adds	r1, r0, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c1e:	6602      	str	r2, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001c20:	3102      	adds	r1, #2
  hspi->RxXferSize  = Size;
 8001c22:	878b      	strh	r3, [r1, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c24:	87cb      	strh	r3, [r1, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c26:	6382      	str	r2, [r0, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001c28:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001c2a:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c2c:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c2e:	22e0      	movs	r2, #224	; 0xe0
 8001c30:	68c1      	ldr	r1, [r0, #12]
 8001c32:	6803      	ldr	r3, [r0, #0]
 8001c34:	00d2      	lsls	r2, r2, #3
 8001c36:	4291      	cmp	r1, r2
 8001c38:	d920      	bls.n	8001c7c <HAL_SPI_Receive_IT+0xb4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4914      	ldr	r1, [pc, #80]	; (8001c90 <HAL_SPI_Receive_IT+0xc8>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8001c42:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <HAL_SPI_Receive_IT+0xcc>)
    hspi->RxISR = SPI_RxISR_8BIT;
 8001c44:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	0212      	lsls	r2, r2, #8
 8001c4a:	4296      	cmp	r6, r2
 8001c4c:	d107      	bne.n	8001c5e <HAL_SPI_Receive_IT+0x96>
    __HAL_SPI_DISABLE(hspi);
 8001c4e:	2140      	movs	r1, #64	; 0x40
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	438a      	bics	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	490f      	ldr	r1, [pc, #60]	; (8001c98 <HAL_SPI_Receive_IT+0xd0>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001c5e:	2260      	movs	r2, #96	; 0x60
 8001c60:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c62:	2400      	movs	r4, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c68:	2240      	movs	r2, #64	; 0x40
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	4211      	tst	r1, r2
 8001c6e:	d102      	bne.n	8001c76 <HAL_SPI_Receive_IT+0xae>
    __HAL_SPI_ENABLE(hspi);
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001c76:	2300      	movs	r3, #0
 8001c78:	702b      	strb	r3, [r5, #0]
  return errorcode;
 8001c7a:	e7b7      	b.n	8001bec <HAL_SPI_Receive_IT+0x24>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	0152      	lsls	r2, r2, #5
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_SPI_Receive_IT+0xd4>)
 8001c88:	e7dc      	b.n	8001c44 <HAL_SPI_Receive_IT+0x7c>
    errorcode = HAL_BUSY;
 8001c8a:	2402      	movs	r4, #2
 8001c8c:	e7f3      	b.n	8001c76 <HAL_SPI_Receive_IT+0xae>
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	ffffefff 	.word	0xffffefff
 8001c94:	08001d11 	.word	0x08001d11
 8001c98:	ffffbfff 	.word	0xffffbfff
 8001c9c:	08001ce9 	.word	0x08001ce9

08001ca0 <HAL_SPI_TxRxCpltCallback>:
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_SPI_ErrorCallback>:
 8001ca2:	4770      	bx	lr

08001ca4 <SPI_CloseRx_ISR>:
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001ca4:	2160      	movs	r1, #96	; 0x60
 8001ca6:	6802      	ldr	r2, [r0, #0]
{
 8001ca8:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001caa:	6853      	ldr	r3, [r2, #4]
{
 8001cac:	0004      	movs	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001cae:	438b      	bics	r3, r1
 8001cb0:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8001cb2:	f7fe feff 	bl	8000ab4 <HAL_GetTick>
 8001cb6:	2164      	movs	r1, #100	; 0x64
 8001cb8:	0002      	movs	r2, r0
 8001cba:	0020      	movs	r0, r4
 8001cbc:	f7ff fc82 	bl	80015c4 <SPI_EndRxTransaction>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d003      	beq.n	8001ccc <SPI_CloseRx_ISR+0x28>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	6623      	str	r3, [r4, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8001ccc:	0023      	movs	r3, r4
 8001cce:	2201      	movs	r2, #1
 8001cd0:	335d      	adds	r3, #93	; 0x5d
 8001cd2:	701a      	strb	r2, [r3, #0]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8001cd4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8001cd6:	0020      	movs	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <SPI_CloseRx_ISR+0x3e>
      HAL_SPI_RxCpltCallback(hspi);
 8001cdc:	f7fe fc7e 	bl	80005dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8001ce0:	bd10      	pop	{r4, pc}
      HAL_SPI_ErrorCallback(hspi);
 8001ce2:	f7ff ffde 	bl	8001ca2 <HAL_SPI_ErrorCallback>
}
 8001ce6:	e7fb      	b.n	8001ce0 <SPI_CloseRx_ISR+0x3c>

08001ce8 <SPI_RxISR_8BIT>:
{
 8001ce8:	b510      	push	{r4, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001cea:	6803      	ldr	r3, [r0, #0]
 8001cec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001cee:	7b1b      	ldrb	r3, [r3, #12]
 8001cf0:	7013      	strb	r3, [r2, #0]
  hspi->RxXferCount--;
 8001cf2:	0002      	movs	r2, r0
  hspi->pRxBuffPtr++;
 8001cf4:	6c03      	ldr	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8001cf6:	3208      	adds	r2, #8
  hspi->pRxBuffPtr++;
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8001cfc:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8001d04:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <SPI_RxISR_8BIT+0x26>
    SPI_CloseRx_ISR(hspi);
 8001d0a:	f7ff ffcb 	bl	8001ca4 <SPI_CloseRx_ISR>
}
 8001d0e:	bd10      	pop	{r4, pc}

08001d10 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001d10:	6803      	ldr	r3, [r0, #0]
{
 8001d12:	b510      	push	{r4, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d18:	801a      	strh	r2, [r3, #0]
  hspi->RxXferCount--;
 8001d1a:	0002      	movs	r2, r0
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8001d20:	3208      	adds	r2, #8
 8001d22:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8001d2a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <SPI_RxISR_16BIT+0x24>
    SPI_CloseRx_ISR(hspi);
 8001d30:	f7ff ffb8 	bl	8001ca4 <SPI_CloseRx_ISR>
}
 8001d34:	bd10      	pop	{r4, pc}

08001d36 <SPI_CloseRxTx_ISR>:
{
 8001d36:	b570      	push	{r4, r5, r6, lr}
 8001d38:	0004      	movs	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d3a:	2520      	movs	r5, #32
  tickstart = HAL_GetTick();
 8001d3c:	f7fe feba 	bl	8000ab4 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d40:	6821      	ldr	r1, [r4, #0]
  tickstart = HAL_GetTick();
 8001d42:	0002      	movs	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d44:	684b      	ldr	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001d46:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d48:	43ab      	bics	r3, r5
 8001d4a:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001d4c:	2164      	movs	r1, #100	; 0x64
 8001d4e:	f7ff fc76 	bl	800163e <SPI_EndRxTxTransaction>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d002      	beq.n	8001d5c <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d56:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d58:	431d      	orrs	r5, r3
 8001d5a:	6625      	str	r5, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8001d5c:	0023      	movs	r3, r4
 8001d5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001d60:	335d      	adds	r3, #93	; 0x5d
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d10b      	bne.n	8001d7e <SPI_CloseRxTx_ISR+0x48>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001d66:	7819      	ldrb	r1, [r3, #0]
 8001d68:	3201      	adds	r2, #1
        HAL_SPI_RxCpltCallback(hspi);
 8001d6a:	0020      	movs	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8001d6c:	701a      	strb	r2, [r3, #0]
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001d6e:	2904      	cmp	r1, #4
 8001d70:	d102      	bne.n	8001d78 <SPI_CloseRxTx_ISR+0x42>
        HAL_SPI_RxCpltCallback(hspi);
 8001d72:	f7fe fc33 	bl	80005dc <HAL_SPI_RxCpltCallback>
}
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8001d78:	f7ff ff92 	bl	8001ca0 <HAL_SPI_TxRxCpltCallback>
 8001d7c:	e7fb      	b.n	8001d76 <SPI_CloseRxTx_ISR+0x40>
      hspi->State = HAL_SPI_STATE_READY;
 8001d7e:	2201      	movs	r2, #1
      HAL_SPI_ErrorCallback(hspi);
 8001d80:	0020      	movs	r0, r4
      hspi->State = HAL_SPI_STATE_READY;
 8001d82:	701a      	strb	r2, [r3, #0]
      HAL_SPI_ErrorCallback(hspi);
 8001d84:	f7ff ff8d 	bl	8001ca2 <HAL_SPI_ErrorCallback>
}
 8001d88:	e7f5      	b.n	8001d76 <SPI_CloseRxTx_ISR+0x40>

08001d8a <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8001d8a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
{
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d90:	6802      	ldr	r2, [r0, #0]
  if (hspi->TxXferCount >= 2U)
 8001d92:	2901      	cmp	r1, #1
 8001d94:	d917      	bls.n	8001dc6 <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d96:	8819      	ldrh	r1, [r3, #0]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	3302      	adds	r3, #2
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d9a:	60d1      	str	r1, [r2, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d9c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8001d9e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001da0:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8001da6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001dac:	2180      	movs	r1, #128	; 0x80
 8001dae:	6802      	ldr	r2, [r0, #0]
 8001db0:	6853      	ldr	r3, [r2, #4]
 8001db2:	438b      	bics	r3, r1
 8001db4:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8001db6:	0003      	movs	r3, r0
 8001db8:	3308      	adds	r3, #8
 8001dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <SPI_2linesTxISR_8BIT+0x3a>
      SPI_CloseRxTx_ISR(hspi);
 8001dc0:	f7ff ffb9 	bl	8001d36 <SPI_CloseRxTx_ISR>
}
 8001dc4:	bd10      	pop	{r4, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	7313      	strb	r3, [r2, #12]
    hspi->pTxBuffPtr++;
 8001dca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001dcc:	3301      	adds	r3, #1
 8001dce:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8001dd0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	e7e5      	b.n	8001da2 <SPI_2linesTxISR_8BIT+0x18>

08001dd6 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8001dd6:	0003      	movs	r3, r0
{
 8001dd8:	b510      	push	{r4, lr}
  if (hspi->RxXferCount > 1U)
 8001dda:	3308      	adds	r3, #8
 8001ddc:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
 8001dde:	6801      	ldr	r1, [r0, #0]
 8001de0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001de2:	2c01      	cmp	r4, #1
 8001de4:	d91d      	bls.n	8001e22 <SPI_2linesRxISR_8BIT+0x4c>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001de6:	68cc      	ldr	r4, [r1, #12]
 8001de8:	8014      	strh	r4, [r2, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dea:	3202      	adds	r2, #2
 8001dec:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8001dee:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001df0:	3a02      	subs	r2, #2
 8001df2:	b292      	uxth	r2, r2
 8001df4:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hspi->RxXferCount == 1U)
 8001df6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001df8:	2a01      	cmp	r2, #1
 8001dfa:	d104      	bne.n	8001e06 <SPI_2linesRxISR_8BIT+0x30>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	684c      	ldr	r4, [r1, #4]
 8001e00:	0152      	lsls	r2, r2, #5
 8001e02:	4322      	orrs	r2, r4
 8001e04:	604a      	str	r2, [r1, #4]
  if (hspi->RxXferCount == 0U)
 8001e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <SPI_2linesRxISR_8BIT+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001e0c:	2160      	movs	r1, #96	; 0x60
 8001e0e:	6802      	ldr	r2, [r0, #0]
 8001e10:	6853      	ldr	r3, [r2, #4]
 8001e12:	438b      	bics	r3, r1
 8001e14:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8001e16:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <SPI_2linesRxISR_8BIT+0x4a>
      SPI_CloseRxTx_ISR(hspi);
 8001e1c:	f7ff ff8b 	bl	8001d36 <SPI_CloseRxTx_ISR>
}
 8001e20:	bd10      	pop	{r4, pc}
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001e22:	7b09      	ldrb	r1, [r1, #12]
 8001e24:	7011      	strb	r1, [r2, #0]
    hspi->pRxBuffPtr++;
 8001e26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001e28:	3201      	adds	r2, #1
 8001e2a:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8001e2c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	b292      	uxth	r2, r2
 8001e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e34:	e7e7      	b.n	8001e06 <SPI_2linesRxISR_8BIT+0x30>

08001e36 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e36:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e38:	6802      	ldr	r2, [r0, #0]
 8001e3a:	8819      	ldrh	r1, [r3, #0]
{
 8001e3c:	b510      	push	{r4, lr}
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e3e:	3302      	adds	r3, #2
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e40:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e42:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8001e44:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8001e4c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10a      	bne.n	8001e68 <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001e52:	2180      	movs	r1, #128	; 0x80
 8001e54:	6853      	ldr	r3, [r2, #4]
 8001e56:	438b      	bics	r3, r1
 8001e58:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <SPI_2linesTxISR_16BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8001e64:	f7ff ff67 	bl	8001d36 <SPI_CloseRxTx_ISR>
}
 8001e68:	bd10      	pop	{r4, pc}

08001e6a <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001e6a:	6802      	ldr	r2, [r0, #0]
 8001e6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e6e:	68d1      	ldr	r1, [r2, #12]
{
 8001e70:	b510      	push	{r4, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001e72:	8019      	strh	r1, [r3, #0]
  hspi->RxXferCount--;
 8001e74:	0001      	movs	r1, r0
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e76:	3302      	adds	r3, #2
 8001e78:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8001e7a:	3108      	adds	r1, #8
 8001e7c:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	87cb      	strh	r3, [r1, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 8001e84:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <SPI_2linesRxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	6853      	ldr	r3, [r2, #4]
 8001e8e:	438b      	bics	r3, r1
 8001e90:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8001e92:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <SPI_2linesRxISR_16BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8001e98:	f7ff ff4d 	bl	8001d36 <SPI_CloseRxTx_ISR>
}
 8001e9c:	bd10      	pop	{r4, pc}
	...

08001ea0 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001ea0:	6803      	ldr	r3, [r0, #0]
{
 8001ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea4:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8001ea6:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001ea8:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001eaa:	2501      	movs	r5, #1
 8001eac:	0991      	lsrs	r1, r2, #6
 8001eae:	000f      	movs	r7, r1
{
 8001eb0:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001eb2:	402f      	ands	r7, r5
 8001eb4:	4229      	tst	r1, r5
 8001eb6:	d109      	bne.n	8001ecc <HAL_SPI_IRQHandler+0x2c>
 8001eb8:	422a      	tst	r2, r5
 8001eba:	d007      	beq.n	8001ecc <HAL_SPI_IRQHandler+0x2c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001ebc:	0986      	lsrs	r6, r0, #6
 8001ebe:	422e      	tst	r6, r5
 8001ec0:	d004      	beq.n	8001ecc <HAL_SPI_IRQHandler+0x2c>
    hspi->RxISR(hspi);
 8001ec2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hspi->TxISR(hspi);
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	4798      	blx	r3
}
 8001ec8:	b005      	add	sp, #20
 8001eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001ecc:	2501      	movs	r5, #1
 8001ece:	0796      	lsls	r6, r2, #30
 8001ed0:	d504      	bpl.n	8001edc <HAL_SPI_IRQHandler+0x3c>
 8001ed2:	09c6      	lsrs	r6, r0, #7
 8001ed4:	422e      	tst	r6, r5
 8001ed6:	d001      	beq.n	8001edc <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8001ed8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001eda:	e7f3      	b.n	8001ec4 <HAL_SPI_IRQHandler+0x24>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001edc:	2501      	movs	r5, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001ede:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001ee0:	4331      	orrs	r1, r6
 8001ee2:	0a12      	lsrs	r2, r2, #8
 8001ee4:	402a      	ands	r2, r5
 8001ee6:	4029      	ands	r1, r5
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	d0ed      	beq.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
 8001eec:	0941      	lsrs	r1, r0, #5
 8001eee:	4229      	tst	r1, r5
 8001ef0:	d0ea      	beq.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001ef2:	2f00      	cmp	r7, #0
 8001ef4:	d00f      	beq.n	8001f16 <HAL_SPI_IRQHandler+0x76>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001ef6:	0021      	movs	r1, r4
 8001ef8:	315d      	adds	r1, #93	; 0x5d
 8001efa:	7809      	ldrb	r1, [r1, #0]
 8001efc:	2903      	cmp	r1, #3
 8001efe:	d050      	beq.n	8001fa2 <HAL_SPI_IRQHandler+0x102>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001f00:	2104      	movs	r1, #4
 8001f02:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001f04:	4329      	orrs	r1, r5
 8001f06:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	9100      	str	r1, [sp, #0]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	9100      	str	r1, [sp, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	9100      	str	r1, [sp, #0]
 8001f14:	9900      	ldr	r1, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f16:	2101      	movs	r1, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001f18:	420e      	tst	r6, r1
 8001f1a:	d00b      	beq.n	8001f34 <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001f1c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001f1e:	4329      	orrs	r1, r5
 8001f20:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f22:	2100      	movs	r1, #0
 8001f24:	2540      	movs	r5, #64	; 0x40
 8001f26:	9102      	str	r1, [sp, #8]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	9102      	str	r1, [sp, #8]
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	43a9      	bics	r1, r5
 8001f30:	6019      	str	r1, [r3, #0]
 8001f32:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001f38:	2208      	movs	r2, #8
 8001f3a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001f40:	2200      	movs	r2, #0
 8001f42:	9203      	str	r2, [sp, #12]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	9203      	str	r2, [sp, #12]
 8001f48:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d0bb      	beq.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001f50:	21e0      	movs	r1, #224	; 0xe0
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	438a      	bics	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001f58:	0022      	movs	r2, r4
 8001f5a:	39df      	subs	r1, #223	; 0xdf
 8001f5c:	325d      	adds	r2, #93	; 0x5d
 8001f5e:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001f60:	3102      	adds	r1, #2
 8001f62:	4208      	tst	r0, r1
 8001f64:	d025      	beq.n	8001fb2 <HAL_SPI_IRQHandler+0x112>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f66:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f6a:	438a      	bics	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_SPI_IRQHandler+0x11c>)
 8001f74:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001f76:	f7fe fe23 	bl	8000bc0 <HAL_DMA_Abort_IT>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f7e:	2340      	movs	r3, #64	; 0x40
 8001f80:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f82:	4313      	orrs	r3, r2
 8001f84:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d09d      	beq.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_SPI_IRQHandler+0x11c>)
 8001f8e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f90:	f7fe fe16 	bl	8000bc0 <HAL_DMA_Abort_IT>
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d097      	beq.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f98:	2340      	movs	r3, #64	; 0x40
 8001f9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	6623      	str	r3, [r4, #96]	; 0x60
 8001fa0:	e792      	b.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	9201      	str	r2, [sp, #4]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	9201      	str	r2, [sp, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	9b01      	ldr	r3, [sp, #4]
        return;
 8001fb0:	e78a      	b.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
        HAL_SPI_ErrorCallback(hspi);
 8001fb2:	0020      	movs	r0, r4
 8001fb4:	f7ff fe75 	bl	8001ca2 <HAL_SPI_ErrorCallback>
 8001fb8:	e786      	b.n	8001ec8 <HAL_SPI_IRQHandler+0x28>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	08001fc1 	.word	0x08001fc1

08001fc0 <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	0002      	movs	r2, r0
{
 8001fc6:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 8001fc8:	3208      	adds	r2, #8
 8001fca:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001fcc:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8001fce:	f7ff fe68 	bl	8001ca2 <HAL_SPI_ErrorCallback>
}
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd4:	0002      	movs	r2, r0
{
 8001fd6:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001fda:	323d      	adds	r2, #61	; 0x3d
 8001fdc:	7811      	ldrb	r1, [r2, #0]
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d112      	bne.n	8002008 <HAL_TIM_Base_Start+0x34>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	7011      	strb	r1, [r2, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_TIM_Base_Start+0x40>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d002      	beq.n	8001ff4 <HAL_TIM_Base_Start+0x20>
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_TIM_Base_Start+0x44>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d10a      	bne.n	800200a <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff4:	2107      	movs	r1, #7
 8001ff6:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8001ff8:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffa:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffc:	2a06      	cmp	r2, #6
 8001ffe:	d003      	beq.n	8002008 <HAL_TIM_Base_Start+0x34>
      __HAL_TIM_ENABLE(htim);
 8002000:	2201      	movs	r2, #1
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4310      	orrs	r0, r2
 800200e:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8002010:	2000      	movs	r0, #0
 8002012:	e7f9      	b.n	8002008 <HAL_TIM_Base_Start+0x34>
 8002014:	40012c00 	.word	0x40012c00
 8002018:	40000400 	.word	0x40000400

0800201c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <TIM_Base_SetConfig+0x68>)
{
 800201e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002020:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002022:	4290      	cmp	r0, r2
 8002024:	d002      	beq.n	800202c <TIM_Base_SetConfig+0x10>
 8002026:	4c18      	ldr	r4, [pc, #96]	; (8002088 <TIM_Base_SetConfig+0x6c>)
 8002028:	42a0      	cmp	r0, r4
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	2470      	movs	r4, #112	; 0x70
 800202e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002030:	684c      	ldr	r4, [r1, #4]
 8002032:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002034:	4290      	cmp	r0, r2
 8002036:	d00b      	beq.n	8002050 <TIM_Base_SetConfig+0x34>
 8002038:	4c13      	ldr	r4, [pc, #76]	; (8002088 <TIM_Base_SetConfig+0x6c>)
 800203a:	42a0      	cmp	r0, r4
 800203c:	d008      	beq.n	8002050 <TIM_Base_SetConfig+0x34>
 800203e:	4c13      	ldr	r4, [pc, #76]	; (800208c <TIM_Base_SetConfig+0x70>)
 8002040:	42a0      	cmp	r0, r4
 8002042:	d005      	beq.n	8002050 <TIM_Base_SetConfig+0x34>
 8002044:	4c12      	ldr	r4, [pc, #72]	; (8002090 <TIM_Base_SetConfig+0x74>)
 8002046:	42a0      	cmp	r0, r4
 8002048:	d002      	beq.n	8002050 <TIM_Base_SetConfig+0x34>
 800204a:	4c12      	ldr	r4, [pc, #72]	; (8002094 <TIM_Base_SetConfig+0x78>)
 800204c:	42a0      	cmp	r0, r4
 800204e:	d103      	bne.n	8002058 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002050:	4c11      	ldr	r4, [pc, #68]	; (8002098 <TIM_Base_SetConfig+0x7c>)
 8002052:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002054:	68cc      	ldr	r4, [r1, #12]
 8002056:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002058:	2480      	movs	r4, #128	; 0x80
 800205a:	43a3      	bics	r3, r4
 800205c:	694c      	ldr	r4, [r1, #20]
 800205e:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002060:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002062:	688b      	ldr	r3, [r1, #8]
 8002064:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002066:	680b      	ldr	r3, [r1, #0]
 8002068:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206a:	4290      	cmp	r0, r2
 800206c:	d005      	beq.n	800207a <TIM_Base_SetConfig+0x5e>
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <TIM_Base_SetConfig+0x74>)
 8002070:	4298      	cmp	r0, r3
 8002072:	d002      	beq.n	800207a <TIM_Base_SetConfig+0x5e>
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <TIM_Base_SetConfig+0x78>)
 8002076:	4298      	cmp	r0, r3
 8002078:	d101      	bne.n	800207e <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800207a:	690b      	ldr	r3, [r1, #16]
 800207c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207e:	2301      	movs	r3, #1
 8002080:	6143      	str	r3, [r0, #20]
}
 8002082:	bd10      	pop	{r4, pc}
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40000400 	.word	0x40000400
 800208c:	40002000 	.word	0x40002000
 8002090:	40014400 	.word	0x40014400
 8002094:	40014800 	.word	0x40014800
 8002098:	fffffcff 	.word	0xfffffcff

0800209c <HAL_TIM_Base_Init>:
{
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	0004      	movs	r4, r0
    return HAL_ERROR;
 80020a0:	2001      	movs	r0, #1
  if (htim == NULL)
 80020a2:	2c00      	cmp	r4, #0
 80020a4:	d021      	beq.n	80020ea <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020a6:	0025      	movs	r5, r4
 80020a8:	353d      	adds	r5, #61	; 0x3d
 80020aa:	782b      	ldrb	r3, [r5, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80020b2:	0023      	movs	r3, r4
 80020b4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020b6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80020b8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80020ba:	f7fe fc25 	bl	8000908 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020be:	2302      	movs	r3, #2
 80020c0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	1d21      	adds	r1, r4, #4
 80020c6:	f7ff ffa9 	bl	800201c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ca:	0022      	movs	r2, r4
 80020cc:	2301      	movs	r3, #1
  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d0:	3246      	adds	r2, #70	; 0x46
 80020d2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d6:	3a08      	subs	r2, #8
 80020d8:	7013      	strb	r3, [r2, #0]
 80020da:	7053      	strb	r3, [r2, #1]
 80020dc:	7093      	strb	r3, [r2, #2]
 80020de:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	7113      	strb	r3, [r2, #4]
 80020e2:	7153      	strb	r3, [r2, #5]
 80020e4:	7193      	strb	r3, [r2, #6]
 80020e6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80020e8:	702b      	strb	r3, [r5, #0]
}
 80020ea:	bd70      	pop	{r4, r5, r6, pc}

080020ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020ec:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ee:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f2:	2201      	movs	r2, #1
 80020f4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020f8:	6801      	ldr	r1, [r0, #0]
 80020fa:	4d12      	ldr	r5, [pc, #72]	; (8002144 <UART_EndRxTransfer+0x58>)
 80020fc:	680b      	ldr	r3, [r1, #0]
 80020fe:	402b      	ands	r3, r5
 8002100:	600b      	str	r3, [r1, #0]
 8002102:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002106:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210e:	6801      	ldr	r1, [r0, #0]
 8002110:	688b      	ldr	r3, [r1, #8]
 8002112:	4393      	bics	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
 8002116:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800211a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800211c:	4293      	cmp	r3, r2
 800211e:	d10a      	bne.n	8002136 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002120:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002124:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002128:	2410      	movs	r4, #16
 800212a:	6802      	ldr	r2, [r0, #0]
 800212c:	6813      	ldr	r3, [r2, #0]
 800212e:	43a3      	bics	r3, r4
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002136:	2320      	movs	r3, #32
 8002138:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800213a:	2300      	movs	r3, #0
 800213c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800213e:	6643      	str	r3, [r0, #100]	; 0x64
}
 8002140:	bd30      	pop	{r4, r5, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	fffffedf 	.word	0xfffffedf

08002148 <HAL_UART_TxCpltCallback>:
 8002148:	4770      	bx	lr

0800214a <HAL_UART_ErrorCallback>:
 800214a:	4770      	bx	lr

0800214c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800214c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	0002      	movs	r2, r0
{
 8002152:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002154:	325a      	adds	r2, #90	; 0x5a
 8002156:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002158:	3a08      	subs	r2, #8
 800215a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800215c:	f7ff fff5 	bl	800214a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002160:	bd10      	pop	{r4, pc}

08002162 <HAL_UARTEx_RxEventCallback>:
}
 8002162:	4770      	bx	lr

08002164 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002164:	6801      	ldr	r1, [r0, #0]
{
 8002166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002168:	69cb      	ldr	r3, [r1, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800216a:	4d9f      	ldr	r5, [pc, #636]	; (80023e8 <HAL_UART_IRQHandler+0x284>)
{
 800216c:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800216e:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002170:	688a      	ldr	r2, [r1, #8]
  if (errorflags == 0U)
 8002172:	422b      	tst	r3, r5
 8002174:	d10b      	bne.n	800218e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002176:	2220      	movs	r2, #32
 8002178:	4213      	tst	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_UART_IRQHandler+0x1a>
 800217c:	e07e      	b.n	800227c <HAL_UART_IRQHandler+0x118>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800217e:	4210      	tst	r0, r2
 8002180:	d100      	bne.n	8002184 <HAL_UART_IRQHandler+0x20>
 8002182:	e07b      	b.n	800227c <HAL_UART_IRQHandler+0x118>
      if (huart->RxISR != NULL)
 8002184:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8002186:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002188:	2b00      	cmp	r3, #0
 800218a:	d16d      	bne.n	8002268 <HAL_UART_IRQHandler+0x104>
 800218c:	e06d      	b.n	800226a <HAL_UART_IRQHandler+0x106>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800218e:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002190:	4d96      	ldr	r5, [pc, #600]	; (80023ec <HAL_UART_IRQHandler+0x288>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002192:	4032      	ands	r2, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002194:	4005      	ands	r5, r0
 8002196:	4315      	orrs	r5, r2
 8002198:	d100      	bne.n	800219c <HAL_UART_IRQHandler+0x38>
 800219a:	e06f      	b.n	800227c <HAL_UART_IRQHandler+0x118>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800219c:	1d25      	adds	r5, r4, #4
 800219e:	4233      	tst	r3, r6
 80021a0:	d005      	beq.n	80021ae <HAL_UART_IRQHandler+0x4a>
 80021a2:	05c7      	lsls	r7, r0, #23
 80021a4:	d503      	bpl.n	80021ae <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80021a6:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021a8:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80021aa:	433e      	orrs	r6, r7
 80021ac:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021ae:	2602      	movs	r6, #2
 80021b0:	4233      	tst	r3, r6
 80021b2:	d006      	beq.n	80021c2 <HAL_UART_IRQHandler+0x5e>
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80021b8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021ba:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80021bc:	19b6      	adds	r6, r6, r6
 80021be:	433e      	orrs	r6, r7
 80021c0:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021c2:	2604      	movs	r6, #4
 80021c4:	4233      	tst	r3, r6
 80021c6:	d006      	beq.n	80021d6 <HAL_UART_IRQHandler+0x72>
 80021c8:	2a00      	cmp	r2, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80021cc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021ce:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80021d0:	3e02      	subs	r6, #2
 80021d2:	433e      	orrs	r6, r7
 80021d4:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80021d6:	2608      	movs	r6, #8
 80021d8:	4233      	tst	r3, r6
 80021da:	d007      	beq.n	80021ec <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80021dc:	2720      	movs	r7, #32
 80021de:	4007      	ands	r7, r0
 80021e0:	433a      	orrs	r2, r7
 80021e2:	d003      	beq.n	80021ec <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80021e4:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021e6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80021e8:	4316      	orrs	r6, r2
 80021ea:	67ee      	str	r6, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	4213      	tst	r3, r2
 80021f2:	d006      	beq.n	8002202 <HAL_UART_IRQHandler+0x9e>
 80021f4:	0146      	lsls	r6, r0, #5
 80021f6:	d504      	bpl.n	8002202 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021f8:	620a      	str	r2, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80021fa:	2220      	movs	r2, #32
 80021fc:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 80021fe:	430a      	orrs	r2, r1
 8002200:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002202:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002204:	2a00      	cmp	r2, #0
 8002206:	d030      	beq.n	800226a <HAL_UART_IRQHandler+0x106>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002208:	2220      	movs	r2, #32
 800220a:	4213      	tst	r3, r2
 800220c:	d006      	beq.n	800221c <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800220e:	4210      	tst	r0, r2
 8002210:	d004      	beq.n	800221c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8002212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8002218:	0020      	movs	r0, r4
 800221a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800221c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800221e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002220:	2740      	movs	r7, #64	; 0x40
 8002222:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002224:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002226:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002228:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800222a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800222c:	431e      	orrs	r6, r3
 800222e:	d021      	beq.n	8002274 <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 8002230:	f7ff ff5c 	bl	80020ec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	423b      	tst	r3, r7
 800223a:	d017      	beq.n	800226c <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800223c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002240:	2301      	movs	r3, #1
 8002242:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002246:	6822      	ldr	r2, [r4, #0]
 8002248:	6893      	ldr	r3, [r2, #8]
 800224a:	43bb      	bics	r3, r7
 800224c:	6093      	str	r3, [r2, #8]
 800224e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002252:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002254:	2800      	cmp	r0, #0
 8002256:	d009      	beq.n	800226c <HAL_UART_IRQHandler+0x108>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002258:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_UART_IRQHandler+0x28c>)
 800225a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800225c:	f7fe fcb0 	bl	8000bc0 <HAL_DMA_Abort_IT>
 8002260:	2800      	cmp	r0, #0
 8002262:	d002      	beq.n	800226a <HAL_UART_IRQHandler+0x106>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002264:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002266:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002268:	4798      	blx	r3
}
 800226a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 800226c:	0020      	movs	r0, r4
 800226e:	f7ff ff6c 	bl	800214a <HAL_UART_ErrorCallback>
 8002272:	e7fa      	b.n	800226a <HAL_UART_IRQHandler+0x106>
        HAL_UART_ErrorCallback(huart);
 8002274:	f7ff ff69 	bl	800214a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002278:	67ee      	str	r6, [r5, #124]	; 0x7c
 800227a:	e7f6      	b.n	800226a <HAL_UART_IRQHandler+0x106>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800227c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800227e:	2a01      	cmp	r2, #1
 8002280:	d000      	beq.n	8002284 <HAL_UART_IRQHandler+0x120>
 8002282:	e090      	b.n	80023a6 <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002284:	2510      	movs	r5, #16
 8002286:	422b      	tst	r3, r5
 8002288:	d100      	bne.n	800228c <HAL_UART_IRQHandler+0x128>
 800228a:	e08c      	b.n	80023a6 <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800228c:	4228      	tst	r0, r5
 800228e:	d100      	bne.n	8002292 <HAL_UART_IRQHandler+0x12e>
 8002290:	e089      	b.n	80023a6 <HAL_UART_IRQHandler+0x242>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002292:	620d      	str	r5, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002294:	688b      	ldr	r3, [r1, #8]
 8002296:	2140      	movs	r1, #64	; 0x40
 8002298:	0018      	movs	r0, r3
 800229a:	4008      	ands	r0, r1
 800229c:	420b      	tst	r3, r1
 800229e:	d04c      	beq.n	800233a <HAL_UART_IRQHandler+0x1d6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022a0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80022a2:	6803      	ldr	r3, [r0, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0de      	beq.n	800226a <HAL_UART_IRQHandler+0x106>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022ac:	0026      	movs	r6, r4
 80022ae:	3658      	adds	r6, #88	; 0x58
 80022b0:	8837      	ldrh	r7, [r6, #0]
 80022b2:	429f      	cmp	r7, r3
 80022b4:	d9d9      	bls.n	800226a <HAL_UART_IRQHandler+0x106>
        huart->RxXferCount = nb_remaining_rx_data;
 80022b6:	0027      	movs	r7, r4
 80022b8:	375a      	adds	r7, #90	; 0x5a
 80022ba:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022bc:	6983      	ldr	r3, [r0, #24]
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d031      	beq.n	8002326 <HAL_UART_IRQHandler+0x1c2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022c2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022ca:	6820      	ldr	r0, [r4, #0]
 80022cc:	4d49      	ldr	r5, [pc, #292]	; (80023f4 <HAL_UART_IRQHandler+0x290>)
 80022ce:	6803      	ldr	r3, [r0, #0]
 80022d0:	402b      	ands	r3, r5
 80022d2:	6003      	str	r3, [r0, #0]
 80022d4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022dc:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e0:	6820      	ldr	r0, [r4, #0]
 80022e2:	6883      	ldr	r3, [r0, #8]
 80022e4:	4393      	bics	r3, r2
 80022e6:	6083      	str	r3, [r0, #8]
 80022e8:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ec:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f0:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	6883      	ldr	r3, [r0, #8]
 80022f8:	438b      	bics	r3, r1
 80022fa:	6083      	str	r3, [r0, #8]
 80022fc:	f387 8810 	msr	PRIMASK, r7
          huart->RxState = HAL_UART_STATE_READY;
 8002300:	2320      	movs	r3, #32
 8002302:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002304:	2300      	movs	r3, #0
 8002306:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002308:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	3512      	adds	r5, #18
 8002314:	6813      	ldr	r3, [r2, #0]
 8002316:	35ff      	adds	r5, #255	; 0xff
 8002318:	43ab      	bics	r3, r5
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002320:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002322:	f7fe fc2f 	bl	8000b84 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002326:	0023      	movs	r3, r4
 8002328:	335a      	adds	r3, #90	; 0x5a
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	8831      	ldrh	r1, [r6, #0]
 800232e:	1ac9      	subs	r1, r1, r3
 8002330:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002332:	0020      	movs	r0, r4
 8002334:	f7ff ff15 	bl	8002162 <HAL_UARTEx_RxEventCallback>
 8002338:	e797      	b.n	800226a <HAL_UART_IRQHandler+0x106>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800233a:	0026      	movs	r6, r4
 800233c:	365a      	adds	r6, #90	; 0x5a
 800233e:	8833      	ldrh	r3, [r6, #0]
      if ((huart->RxXferCount > 0U)
 8002340:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002342:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8002344:	2900      	cmp	r1, #0
 8002346:	d100      	bne.n	800234a <HAL_UART_IRQHandler+0x1e6>
 8002348:	e78f      	b.n	800226a <HAL_UART_IRQHandler+0x106>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800234a:	0021      	movs	r1, r4
 800234c:	3158      	adds	r1, #88	; 0x58
 800234e:	8809      	ldrh	r1, [r1, #0]
 8002350:	1ac9      	subs	r1, r1, r3
 8002352:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002354:	2900      	cmp	r1, #0
 8002356:	d100      	bne.n	800235a <HAL_UART_IRQHandler+0x1f6>
 8002358:	e787      	b.n	800226a <HAL_UART_IRQHandler+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002362:	6826      	ldr	r6, [r4, #0]
 8002364:	4d24      	ldr	r5, [pc, #144]	; (80023f8 <HAL_UART_IRQHandler+0x294>)
 8002366:	6833      	ldr	r3, [r6, #0]
 8002368:	402b      	ands	r3, r5
 800236a:	6033      	str	r3, [r6, #0]
 800236c:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002370:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002374:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002378:	6826      	ldr	r6, [r4, #0]
 800237a:	68b3      	ldr	r3, [r6, #8]
 800237c:	4393      	bics	r3, r2
 800237e:	60b3      	str	r3, [r6, #8]
 8002380:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8002384:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 8002386:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8002388:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800238a:	6620      	str	r0, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800238c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002390:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	3532      	adds	r5, #50	; 0x32
 8002398:	6813      	ldr	r3, [r2, #0]
 800239a:	35ff      	adds	r5, #255	; 0xff
 800239c:	43ab      	bics	r3, r5
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	f380 8810 	msr	PRIMASK, r0
 80023a4:	e7c5      	b.n	8002332 <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	4213      	tst	r3, r2
 80023aa:	d003      	beq.n	80023b4 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80023ac:	4210      	tst	r0, r2
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_IRQHandler+0x250>
    if (huart->TxISR != NULL)
 80023b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80023b2:	e6e8      	b.n	8002186 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80023b4:	2240      	movs	r2, #64	; 0x40
 80023b6:	4213      	tst	r3, r2
 80023b8:	d100      	bne.n	80023bc <HAL_UART_IRQHandler+0x258>
 80023ba:	e756      	b.n	800226a <HAL_UART_IRQHandler+0x106>
 80023bc:	4210      	tst	r0, r2
 80023be:	d100      	bne.n	80023c2 <HAL_UART_IRQHandler+0x25e>
 80023c0:	e753      	b.n	800226a <HAL_UART_IRQHandler+0x106>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c6:	2301      	movs	r3, #1
 80023c8:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023cc:	6821      	ldr	r1, [r4, #0]
 80023ce:	680b      	ldr	r3, [r1, #0]
 80023d0:	4393      	bics	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	2320      	movs	r3, #32
 80023da:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80023dc:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023de:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 80023e0:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 80023e2:	f7ff feb1 	bl	8002148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023e6:	e740      	b.n	800226a <HAL_UART_IRQHandler+0x106>
 80023e8:	0000080f 	.word	0x0000080f
 80023ec:	04000120 	.word	0x04000120
 80023f0:	0800214d 	.word	0x0800214d
 80023f4:	fffffeff 	.word	0xfffffeff
 80023f8:	fffffedf 	.word	0xfffffedf

080023fc <UART_SetConfig>:
{
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002400:	6925      	ldr	r5, [r4, #16]
 8002402:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002404:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002406:	432a      	orrs	r2, r5
 8002408:	6965      	ldr	r5, [r4, #20]
 800240a:	69c3      	ldr	r3, [r0, #28]
 800240c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800240e:	6808      	ldr	r0, [r1, #0]
 8002410:	4d39      	ldr	r5, [pc, #228]	; (80024f8 <UART_SetConfig+0xfc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002412:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002414:	4028      	ands	r0, r5
 8002416:	4302      	orrs	r2, r0
 8002418:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800241a:	684a      	ldr	r2, [r1, #4]
 800241c:	4837      	ldr	r0, [pc, #220]	; (80024fc <UART_SetConfig+0x100>)
  tmpreg |= huart->Init.OneBitSampling;
 800241e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002420:	4002      	ands	r2, r0
 8002422:	68e0      	ldr	r0, [r4, #12]
 8002424:	4302      	orrs	r2, r0
 8002426:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002428:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800242a:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800242c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800242e:	4d34      	ldr	r5, [pc, #208]	; (8002500 <UART_SetConfig+0x104>)
 8002430:	4028      	ands	r0, r5
 8002432:	4302      	orrs	r2, r0
 8002434:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002436:	2103      	movs	r1, #3
 8002438:	4a32      	ldr	r2, [pc, #200]	; (8002504 <UART_SetConfig+0x108>)
 800243a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800243c:	400a      	ands	r2, r1
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	3a01      	subs	r2, #1
 8002442:	0209      	lsls	r1, r1, #8
 8002444:	2a02      	cmp	r2, #2
 8002446:	d84c      	bhi.n	80024e2 <UART_SetConfig+0xe6>
 8002448:	482f      	ldr	r0, [pc, #188]	; (8002508 <UART_SetConfig+0x10c>)
 800244a:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800244c:	428b      	cmp	r3, r1
 800244e:	d124      	bne.n	800249a <UART_SetConfig+0x9e>
    switch (clocksource)
 8002450:	2808      	cmp	r0, #8
 8002452:	d817      	bhi.n	8002484 <UART_SetConfig+0x88>
 8002454:	f7fd fe62 	bl	800011c <__gnu_thumb1_case_uqi>
 8002458:	16081647 	.word	0x16081647
 800245c:	16161605 	.word	0x16161605
 8002460:	09          	.byte	0x09
 8002461:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8002462:	f7fe fe9b 	bl	800119c <HAL_RCC_GetSysClockFreq>
 8002466:	e040      	b.n	80024ea <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <UART_SetConfig+0x110>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800246a:	0058      	lsls	r0, r3, #1
 800246c:	6863      	ldr	r3, [r4, #4]
 800246e:	6861      	ldr	r1, [r4, #4]
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	18c0      	adds	r0, r0, r3
 8002474:	f7fd fe5c 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002478:	4925      	ldr	r1, [pc, #148]	; (8002510 <UART_SetConfig+0x114>)
 800247a:	b282      	uxth	r2, r0
 800247c:	3a10      	subs	r2, #16
 800247e:	0403      	lsls	r3, r0, #16
 8002480:	428a      	cmp	r2, r1
 8002482:	d901      	bls.n	8002488 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002484:	2001      	movs	r0, #1
 8002486:	e033      	b.n	80024f0 <UART_SetConfig+0xf4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002488:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800248a:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800248c:	4390      	bics	r0, r2
 800248e:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8002490:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002492:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8002494:	4318      	orrs	r0, r3
 8002496:	60d0      	str	r0, [r2, #12]
 8002498:	e029      	b.n	80024ee <UART_SetConfig+0xf2>
    switch (clocksource)
 800249a:	2808      	cmp	r0, #8
 800249c:	d8f2      	bhi.n	8002484 <UART_SetConfig+0x88>
 800249e:	f7fd fe33 	bl	8000108 <__gnu_thumb1_case_sqi>
 80024a2:	f116      	.short	0xf116
 80024a4:	f11bf11e 	.word	0xf11bf11e
 80024a8:	f1f1      	.short	0xf1f1
 80024aa:	05          	.byte	0x05
 80024ab:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ac:	2080      	movs	r0, #128	; 0x80
 80024ae:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	6861      	ldr	r1, [r4, #4]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	1818      	adds	r0, r3, r0
 80024b8:	f7fd fe3a 	bl	8000130 <__udivsi3>
 80024bc:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024be:	0002      	movs	r2, r0
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <UART_SetConfig+0x114>)
 80024c2:	3a10      	subs	r2, #16
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d8dd      	bhi.n	8002484 <UART_SetConfig+0x88>
        huart->Instance->BRR = usartdiv;
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	60d8      	str	r0, [r3, #12]
 80024cc:	e00f      	b.n	80024ee <UART_SetConfig+0xf2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ce:	f7fe ff1b 	bl	8001308 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d00b      	beq.n	80024ee <UART_SetConfig+0xf2>
 80024d6:	e7eb      	b.n	80024b0 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 80024d8:	f7fe fe60 	bl	800119c <HAL_RCC_GetSysClockFreq>
        break;
 80024dc:	e7f9      	b.n	80024d2 <UART_SetConfig+0xd6>
        pclk = (uint32_t) HSI_VALUE;
 80024de:	480b      	ldr	r0, [pc, #44]	; (800250c <UART_SetConfig+0x110>)
 80024e0:	e7e6      	b.n	80024b0 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e2:	428b      	cmp	r3, r1
 80024e4:	d1f3      	bne.n	80024ce <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024e6:	f7fe ff0f 	bl	8001308 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80024ea:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80024ec:	d1bd      	bne.n	800246a <UART_SetConfig+0x6e>
 80024ee:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80024f4:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	ffff69f3 	.word	0xffff69f3
 80024fc:	ffffcfff 	.word	0xffffcfff
 8002500:	fffff4ff 	.word	0xfffff4ff
 8002504:	40021000 	.word	0x40021000
 8002508:	0800283a 	.word	0x0800283a
 800250c:	007a1200 	.word	0x007a1200
 8002510:	0000ffef 	.word	0x0000ffef

08002514 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002514:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002516:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002518:	07da      	lsls	r2, r3, #31
 800251a:	d506      	bpl.n	800252a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800251c:	6801      	ldr	r1, [r0, #0]
 800251e:	4c28      	ldr	r4, [pc, #160]	; (80025c0 <UART_AdvFeatureConfig+0xac>)
 8002520:	684a      	ldr	r2, [r1, #4]
 8002522:	4022      	ands	r2, r4
 8002524:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002526:	4322      	orrs	r2, r4
 8002528:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800252a:	079a      	lsls	r2, r3, #30
 800252c:	d506      	bpl.n	800253c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800252e:	6801      	ldr	r1, [r0, #0]
 8002530:	4c24      	ldr	r4, [pc, #144]	; (80025c4 <UART_AdvFeatureConfig+0xb0>)
 8002532:	684a      	ldr	r2, [r1, #4]
 8002534:	4022      	ands	r2, r4
 8002536:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002538:	4322      	orrs	r2, r4
 800253a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800253c:	075a      	lsls	r2, r3, #29
 800253e:	d506      	bpl.n	800254e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002540:	6801      	ldr	r1, [r0, #0]
 8002542:	4c21      	ldr	r4, [pc, #132]	; (80025c8 <UART_AdvFeatureConfig+0xb4>)
 8002544:	684a      	ldr	r2, [r1, #4]
 8002546:	4022      	ands	r2, r4
 8002548:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800254a:	4322      	orrs	r2, r4
 800254c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800254e:	071a      	lsls	r2, r3, #28
 8002550:	d506      	bpl.n	8002560 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002552:	6801      	ldr	r1, [r0, #0]
 8002554:	4c1d      	ldr	r4, [pc, #116]	; (80025cc <UART_AdvFeatureConfig+0xb8>)
 8002556:	684a      	ldr	r2, [r1, #4]
 8002558:	4022      	ands	r2, r4
 800255a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800255c:	4322      	orrs	r2, r4
 800255e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002560:	06da      	lsls	r2, r3, #27
 8002562:	d506      	bpl.n	8002572 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002564:	6801      	ldr	r1, [r0, #0]
 8002566:	4c1a      	ldr	r4, [pc, #104]	; (80025d0 <UART_AdvFeatureConfig+0xbc>)
 8002568:	688a      	ldr	r2, [r1, #8]
 800256a:	4022      	ands	r2, r4
 800256c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800256e:	4322      	orrs	r2, r4
 8002570:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002572:	069a      	lsls	r2, r3, #26
 8002574:	d506      	bpl.n	8002584 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002576:	6801      	ldr	r1, [r0, #0]
 8002578:	4c16      	ldr	r4, [pc, #88]	; (80025d4 <UART_AdvFeatureConfig+0xc0>)
 800257a:	688a      	ldr	r2, [r1, #8]
 800257c:	4022      	ands	r2, r4
 800257e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002580:	4322      	orrs	r2, r4
 8002582:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002584:	065a      	lsls	r2, r3, #25
 8002586:	d510      	bpl.n	80025aa <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002588:	6801      	ldr	r1, [r0, #0]
 800258a:	4d13      	ldr	r5, [pc, #76]	; (80025d8 <UART_AdvFeatureConfig+0xc4>)
 800258c:	684a      	ldr	r2, [r1, #4]
 800258e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002590:	402a      	ands	r2, r5
 8002592:	4322      	orrs	r2, r4
 8002594:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0352      	lsls	r2, r2, #13
 800259a:	4294      	cmp	r4, r2
 800259c:	d105      	bne.n	80025aa <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800259e:	684a      	ldr	r2, [r1, #4]
 80025a0:	4c0e      	ldr	r4, [pc, #56]	; (80025dc <UART_AdvFeatureConfig+0xc8>)
 80025a2:	4022      	ands	r2, r4
 80025a4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80025a6:	4322      	orrs	r2, r4
 80025a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	d506      	bpl.n	80025bc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025ae:	6802      	ldr	r2, [r0, #0]
 80025b0:	490b      	ldr	r1, [pc, #44]	; (80025e0 <UART_AdvFeatureConfig+0xcc>)
 80025b2:	6853      	ldr	r3, [r2, #4]
 80025b4:	400b      	ands	r3, r1
 80025b6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6053      	str	r3, [r2, #4]
}
 80025bc:	bd30      	pop	{r4, r5, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	fffdffff 	.word	0xfffdffff
 80025c4:	fffeffff 	.word	0xfffeffff
 80025c8:	fffbffff 	.word	0xfffbffff
 80025cc:	ffff7fff 	.word	0xffff7fff
 80025d0:	ffffefff 	.word	0xffffefff
 80025d4:	ffffdfff 	.word	0xffffdfff
 80025d8:	ffefffff 	.word	0xffefffff
 80025dc:	ff9fffff 	.word	0xff9fffff
 80025e0:	fff7ffff 	.word	0xfff7ffff

080025e4 <UART_WaitOnFlagUntilTimeout>:
{
 80025e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025e6:	2780      	movs	r7, #128	; 0x80
{
 80025e8:	0004      	movs	r4, r0
 80025ea:	000d      	movs	r5, r1
 80025ec:	0016      	movs	r6, r2
 80025ee:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025f0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f2:	6822      	ldr	r2, [r4, #0]
 80025f4:	69d3      	ldr	r3, [r2, #28]
 80025f6:	402b      	ands	r3, r5
 80025f8:	1b5b      	subs	r3, r3, r5
 80025fa:	4259      	negs	r1, r3
 80025fc:	414b      	adcs	r3, r1
 80025fe:	42b3      	cmp	r3, r6
 8002600:	d001      	beq.n	8002606 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8002602:	2000      	movs	r0, #0
 8002604:	e028      	b.n	8002658 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002606:	9b08      	ldr	r3, [sp, #32]
 8002608:	3301      	adds	r3, #1
 800260a:	d0f3      	beq.n	80025f4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260c:	f7fe fa52 	bl	8000ab4 <HAL_GetTick>
 8002610:	9b01      	ldr	r3, [sp, #4]
 8002612:	1ac0      	subs	r0, r0, r3
 8002614:	9b08      	ldr	r3, [sp, #32]
 8002616:	4298      	cmp	r0, r3
 8002618:	d801      	bhi.n	800261e <UART_WaitOnFlagUntilTimeout+0x3a>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11d      	bne.n	800265a <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002622:	2201      	movs	r2, #1
 8002624:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002628:	6821      	ldr	r1, [r4, #0]
 800262a:	4d1e      	ldr	r5, [pc, #120]	; (80026a4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800262c:	680b      	ldr	r3, [r1, #0]
 800262e:	402b      	ands	r3, r5
 8002630:	600b      	str	r3, [r1, #0]
 8002632:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002636:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263e:	6821      	ldr	r1, [r4, #0]
 8002640:	688b      	ldr	r3, [r1, #8]
 8002642:	4393      	bics	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
 8002646:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800264a:	2320      	movs	r3, #32
 800264c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800264e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002650:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002652:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002654:	3474      	adds	r4, #116	; 0x74
 8002656:	7023      	strb	r3, [r4, #0]
}
 8002658:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800265a:	2104      	movs	r1, #4
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	420a      	tst	r2, r1
 8002662:	d0c6      	beq.n	80025f2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	423a      	tst	r2, r7
 8002668:	d0c3      	beq.n	80025f2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800266a:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002670:	2201      	movs	r2, #1
 8002672:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002676:	6821      	ldr	r1, [r4, #0]
 8002678:	4d0a      	ldr	r5, [pc, #40]	; (80026a4 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800267a:	680b      	ldr	r3, [r1, #0]
 800267c:	402b      	ands	r3, r5
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002684:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002688:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	688b      	ldr	r3, [r1, #8]
 8002690:	4393      	bics	r3, r2
 8002692:	608b      	str	r3, [r1, #8]
 8002694:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8002698:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800269a:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 800269c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800269e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026a0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80026a2:	e7d5      	b.n	8002650 <UART_WaitOnFlagUntilTimeout+0x6c>
 80026a4:	fffffe5f 	.word	0xfffffe5f

080026a8 <UART_CheckIdleState>:
{
 80026a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	2600      	movs	r6, #0
{
 80026ac:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ae:	1d03      	adds	r3, r0, #4
 80026b0:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80026b2:	f7fe f9ff 	bl	8000ab4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026b6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80026b8:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	071b      	lsls	r3, r3, #28
 80026be:	d416      	bmi.n	80026ee <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	075b      	lsls	r3, r3, #29
 80026c6:	d50a      	bpl.n	80026de <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <UART_CheckIdleState+0x60>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	0020      	movs	r0, r4
 80026d2:	002b      	movs	r3, r5
 80026d4:	03c9      	lsls	r1, r1, #15
 80026d6:	f7ff ff85 	bl	80025e4 <UART_WaitOnFlagUntilTimeout>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d112      	bne.n	8002704 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80026de:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80026e2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026e4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e6:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80026e8:	3474      	adds	r4, #116	; 0x74
 80026ea:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80026ec:	e00b      	b.n	8002706 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <UART_CheckIdleState+0x60>)
 80026f2:	0032      	movs	r2, r6
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	0389      	lsls	r1, r1, #14
 80026f8:	0003      	movs	r3, r0
 80026fa:	0020      	movs	r0, r4
 80026fc:	f7ff ff72 	bl	80025e4 <UART_WaitOnFlagUntilTimeout>
 8002700:	2800      	cmp	r0, #0
 8002702:	d0dd      	beq.n	80026c0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002704:	2003      	movs	r0, #3
}
 8002706:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002708:	01ffffff 	.word	0x01ffffff

0800270c <HAL_UART_Init>:
{
 800270c:	b510      	push	{r4, lr}
 800270e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002712:	2001      	movs	r0, #1
}
 8002714:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800271c:	0002      	movs	r2, r0
 800271e:	3274      	adds	r2, #116	; 0x74
 8002720:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002722:	f7fe f907 	bl	8000934 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002726:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002728:	2101      	movs	r1, #1
 800272a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800272e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002730:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002732:	438b      	bics	r3, r1
 8002734:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002736:	f7ff fe61 	bl	80023fc <UART_SetConfig>
 800273a:	2801      	cmp	r0, #1
 800273c:	d0e9      	beq.n	8002712 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800273e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002744:	0020      	movs	r0, r4
 8002746:	f7ff fee5 	bl	8002514 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <HAL_UART_Init+0x60>)
 800274e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002750:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002752:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002754:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	438a      	bics	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800275e:	2201      	movs	r2, #1
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002766:	f7ff ff9f 	bl	80026a8 <UART_CheckIdleState>
 800276a:	e7d3      	b.n	8002714 <HAL_UART_Init+0x8>
 800276c:	fffff7ff 	.word	0xfffff7ff

08002770 <__libc_init_array>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	2600      	movs	r6, #0
 8002774:	4d0c      	ldr	r5, [pc, #48]	; (80027a8 <__libc_init_array+0x38>)
 8002776:	4c0d      	ldr	r4, [pc, #52]	; (80027ac <__libc_init_array+0x3c>)
 8002778:	1b64      	subs	r4, r4, r5
 800277a:	10a4      	asrs	r4, r4, #2
 800277c:	42a6      	cmp	r6, r4
 800277e:	d109      	bne.n	8002794 <__libc_init_array+0x24>
 8002780:	2600      	movs	r6, #0
 8002782:	f000 f82b 	bl	80027dc <_init>
 8002786:	4d0a      	ldr	r5, [pc, #40]	; (80027b0 <__libc_init_array+0x40>)
 8002788:	4c0a      	ldr	r4, [pc, #40]	; (80027b4 <__libc_init_array+0x44>)
 800278a:	1b64      	subs	r4, r4, r5
 800278c:	10a4      	asrs	r4, r4, #2
 800278e:	42a6      	cmp	r6, r4
 8002790:	d105      	bne.n	800279e <__libc_init_array+0x2e>
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	00b3      	lsls	r3, r6, #2
 8002796:	58eb      	ldr	r3, [r5, r3]
 8002798:	4798      	blx	r3
 800279a:	3601      	adds	r6, #1
 800279c:	e7ee      	b.n	800277c <__libc_init_array+0xc>
 800279e:	00b3      	lsls	r3, r6, #2
 80027a0:	58eb      	ldr	r3, [r5, r3]
 80027a2:	4798      	blx	r3
 80027a4:	3601      	adds	r6, #1
 80027a6:	e7f2      	b.n	800278e <__libc_init_array+0x1e>
 80027a8:	08002840 	.word	0x08002840
 80027ac:	08002840 	.word	0x08002840
 80027b0:	08002840 	.word	0x08002840
 80027b4:	08002844 	.word	0x08002844

080027b8 <memcpy>:
 80027b8:	2300      	movs	r3, #0
 80027ba:	b510      	push	{r4, lr}
 80027bc:	429a      	cmp	r2, r3
 80027be:	d100      	bne.n	80027c2 <memcpy+0xa>
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	5ccc      	ldrb	r4, [r1, r3]
 80027c4:	54c4      	strb	r4, [r0, r3]
 80027c6:	3301      	adds	r3, #1
 80027c8:	e7f8      	b.n	80027bc <memcpy+0x4>

080027ca <memset>:
 80027ca:	0003      	movs	r3, r0
 80027cc:	1882      	adds	r2, r0, r2
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d100      	bne.n	80027d4 <memset+0xa>
 80027d2:	4770      	bx	lr
 80027d4:	7019      	strb	r1, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	e7f9      	b.n	80027ce <memset+0x4>
	...

080027dc <_init>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr

080027e8 <_fini>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr
